
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000c5e  00000cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800144  00800144  00000d36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b26  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cec  00000000  00000000  00002a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e2a  00000000  00000000  00003752  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  0000457c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070b  00000000  00000000  0000490c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001000  00000000  00000000  00005017  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006017  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__ctors_end>
   4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
   8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
   c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  10:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  14:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  18:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  1c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  20:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  24:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  30:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  34:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_14>
  3c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  44:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  4c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  50:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  54:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  58:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  5c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  60:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
  64:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	41 72       	andi	r20, 0x21	; 33
  6a:	62 6f       	ori	r22, 0xF2	; 242
  6c:	6c 00       	.word	0x006c	; ????
  6e:	42 6f       	ori	r20, 0xF2	; 242
  70:	74 6f       	ori	r23, 0xF4	; 244
  72:	6e 00       	.word	0x006e	; ????
  74:	43 44       	sbci	r20, 0x43	; 67
  76:	79 4d       	sbci	r23, 0xD9	; 217
  78:	43 00       	.word	0x0043	; ????
  7a:	43 6c       	ori	r20, 0xC3	; 195
  7c:	61 76       	andi	r22, 0x61	; 97
  7e:	45 00       	.word	0x0045	; ????
  80:	46 61       	ori	r20, 0x16	; 22
  82:	63 69       	ori	r22, 0x93	; 147
  84:	6c 00       	.word	0x006c	; ????
  86:	47 61       	ori	r20, 0x17	; 23
  88:	66 61       	ori	r22, 0x16	; 22
  8a:	73 00       	.word	0x0073	; ????
  8c:	48 6f       	ori	r20, 0xF8	; 248
  8e:	6a 61       	ori	r22, 0x1A	; 26
  90:	73 00       	.word	0x0073	; ????
  92:	4c 69       	ori	r20, 0x9C	; 156
  94:	42 72       	andi	r20, 0x22	; 34
  96:	6f 00       	.word	0x006f	; ????
  98:	4c 61       	ori	r20, 0x1C	; 28
  9a:	6e 7a       	andi	r22, 0xAE	; 174
  9c:	61 00       	.word	0x0061	; ????
  9e:	4e 69       	ori	r20, 0x9E	; 158
  a0:	65 76       	andi	r22, 0x65	; 101
  a2:	65 00       	.word	0x0065	; ????
  a4:	50 65       	ori	r21, 0x50	; 80
  a6:	52 72       	andi	r21, 0x22	; 34
  a8:	6f 00       	.word	0x006f	; ????
  aa:	50 65       	ori	r21, 0x50	; 80
  ac:	63 45       	sbci	r22, 0x53	; 83
  ae:	53 00       	.word	0x0053	; ????
  b0:	50 69       	ori	r21, 0x90	; 144
  b2:	41 6e       	ori	r20, 0xE1	; 225
  b4:	6f 00       	.word	0x006f	; ????
  b6:	50 72       	andi	r21, 0x20	; 32
  b8:	59 4b       	sbci	r21, 0xB9	; 185
  ba:	65 00       	.word	0x0065	; ????
  bc:	52 55       	subi	r21, 0x52	; 82
  be:	45 44       	sbci	r20, 0x45	; 69
  c0:	61 00       	.word	0x0061	; ????
  c2:	53 45       	sbci	r21, 0x53	; 83
  c4:	52 49       	sbci	r21, 0x92	; 146
  c6:	45 00       	.word	0x0045	; ????
  c8:	53 61       	ori	r21, 0x13	; 19
  ca:	6c 55       	subi	r22, 0x5C	; 92
  cc:	64 00       	.word	0x0064	; ????
  ce:	53 61       	ori	r21, 0x13	; 19
  d0:	6c 75       	andi	r22, 0x5C	; 92
  d2:	64 00       	.word	0x0064	; ????
  d4:	53 69       	ori	r21, 0x93	; 147
  d6:	6c 6c       	ori	r22, 0xCC	; 204
  d8:	61 00       	.word	0x0061	; ????
  da:	54 65       	ori	r21, 0x54	; 84
  dc:	63 6c       	ori	r22, 0xC3	; 195
  de:	61 00       	.word	0x0061	; ????
  e0:	56 61       	ori	r21, 0x16	; 22
  e2:	6c 6f       	ori	r22, 0xFC	; 252
  e4:	72 00       	.word	0x0072	; ????
  e6:	56 65       	ori	r21, 0x56	; 86
  e8:	72 64       	ori	r23, 0x42	; 66
  ea:	65 00       	.word	0x0065	; ????
  ec:	59 6e       	ori	r21, 0xE9	; 233
  ee:	48 52       	subi	r20, 0x28	; 40
  f0:	7a 00       	.word	0x007a	; ????
  f2:	68 41       	sbci	r22, 0x18	; 24
  f4:	52 64       	ori	r21, 0x42	; 66
  f6:	44 00       	.word	0x0044	; ????
  f8:	73 69       	ori	r23, 0x93	; 147
  fa:	6c 6c       	ori	r22, 0xCC	; 204
  fc:	61 00       	.word	0x0061	; ????

000000fe <LcdCustomChar>:
  fe:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
 10e:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
 11e:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
 12e:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

0000013e <__ctors_end>:
 13e:	11 24       	eor	r1, r1
 140:	1f be       	out	0x3f, r1	; 63
 142:	cf ef       	ldi	r28, 0xFF	; 255
 144:	d8 e0       	ldi	r29, 0x08	; 8
 146:	de bf       	out	0x3e, r29	; 62
 148:	cd bf       	out	0x3d, r28	; 61

0000014a <__do_copy_data>:
 14a:	11 e0       	ldi	r17, 0x01	; 1
 14c:	a0 e0       	ldi	r26, 0x00	; 0
 14e:	b1 e0       	ldi	r27, 0x01	; 1
 150:	ee e5       	ldi	r30, 0x5E	; 94
 152:	fc e0       	ldi	r31, 0x0C	; 12
 154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x10>
 156:	05 90       	lpm	r0, Z+
 158:	0d 92       	st	X+, r0
 15a:	a4 34       	cpi	r26, 0x44	; 68
 15c:	b1 07       	cpc	r27, r17
 15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0xc>

00000160 <__do_clear_bss>:
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	a4 e4       	ldi	r26, 0x44	; 68
 164:	b1 e0       	ldi	r27, 0x01	; 1
 166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
 168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
 16a:	af 35       	cpi	r26, 0x5F	; 95
 16c:	b2 07       	cpc	r27, r18
 16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
 170:	0e 94 53 05 	call	0xaa6	; 0xaa6 <main>
 174:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <_exit>

00000178 <__bad_interrupt>:
 178:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017c <timer_init>:
    /* F_CPU = 16?MHz  
	   Prescaler 64  --> 16Mhz / 64 = 250?kHz -->  4?microsegundos x tick de CLK
        1?ms --> 250 ticks * 4 microsegundos ? OCR0A = 249                             
	*/
	//Timer en modo compare CTC
    TCCR0A = (1<<WGM01);
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	84 bd       	out	0x24, r24	; 36
	//Prescaler en 64            
    TCCR0B = (1<<CS01) | (1<<CS00);
 180:	93 e0       	ldi	r25, 0x03	; 3
 182:	95 bd       	out	0x25, r25	; 37
    OCR0A  = 249;
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	97 bd       	out	0x27, r25	; 39
	//Habilita interrupciones por compare match
    TIMSK0 = (1<<OCIE0A);
 188:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	//Habilita interrupciones globales
    sei();
 18c:	78 94       	sei
 18e:	08 95       	ret

00000190 <__vector_14>:
}

/* ---------- ISR única ---------- */
ISR(TIMER0_COMPA_vect)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
    ++ticksMS; //Paso 1ms, sumo al contador
 1b2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 1b6:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
 1ba:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <__data_end+0x2>
 1be:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <__data_end+0x3>
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	a1 1d       	adc	r26, r1
 1c6:	b1 1d       	adc	r27, r1
 1c8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 1cc:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
 1d0:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <__data_end+0x2>
 1d4:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <__data_end+0x3>

    extern void fsm_tick(void);
    clk_tick(); 
 1d8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <clk_tick>
}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <lcd_prepare_input>:
		case 1: result = digits[0]; break;
		default: return 0; // Error
	}
	
	return (result <= 127) ? result : 0; // Solo ASCII estÃ¡ndar
}
 1fe:	0e 94 7f 04 	call	0x8fe	; 0x8fe <LCDclr>
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 9b 04 	call	0x936	; 0x936 <LCDGotoXY>
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 9b 04 	call	0x936	; 0x936 <LCDGotoXY>
 212:	08 95       	ret

00000214 <lcd_idle>:
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	6b 97       	sbiw	r28, 0x1b	; 27
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
 228:	0e 94 7f 04 	call	0x8fe	; 0x8fe <LCDclr>
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 9b 04 	call	0x936	; 0x936 <LCDGotoXY>
 234:	20 e1       	ldi	r18, 0x10	; 16
 236:	e4 e0       	ldi	r30, 0x04	; 4
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	dc 01       	movw	r26, r24
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	2a 95       	dec	r18
 246:	e1 f7       	brne	.-8      	; 0x240 <lcd_idle+0x2c>
 248:	2b e0       	ldi	r18, 0x0B	; 11
 24a:	e4 e1       	ldi	r30, 0x14	; 20
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	de 01       	movw	r26, r28
 250:	51 96       	adiw	r26, 0x11	; 17
 252:	01 90       	ld	r0, Z+
 254:	0d 92       	st	X+, r0
 256:	2a 95       	dec	r18
 258:	e1 f7       	brne	.-8      	; 0x252 <lcd_idle+0x3e>
 25a:	fc 01       	movw	r30, r24
 25c:	01 90       	ld	r0, Z+
 25e:	00 20       	and	r0, r0
 260:	e9 f7       	brne	.-6      	; 0x25c <lcd_idle+0x48>
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	bf 01       	movw	r22, r30
 266:	68 1b       	sub	r22, r24
 268:	79 0b       	sbc	r23, r25
 26a:	0e 94 83 04 	call	0x906	; 0x906 <LCDstring>
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 9b 04 	call	0x936	; 0x936 <LCDGotoXY>
 276:	ce 01       	movw	r24, r28
 278:	41 96       	adiw	r24, 0x11	; 17
 27a:	fc 01       	movw	r30, r24
 27c:	01 90       	ld	r0, Z+
 27e:	00 20       	and	r0, r0
 280:	e9 f7       	brne	.-6      	; 0x27c <lcd_idle+0x68>
 282:	31 97       	sbiw	r30, 0x01	; 1
 284:	bf 01       	movw	r22, r30
 286:	68 1b       	sub	r22, r24
 288:	79 0b       	sbc	r23, r25
 28a:	0e 94 83 04 	call	0x906	; 0x906 <LCDstring>
 28e:	6b 96       	adiw	r28, 0x1b	; 27
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <lcd_show_word>:
 2a0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <LCDclr>
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 9b 04 	call	0x936	; 0x936 <LCDGotoXY>
 2ac:	65 e0       	ldi	r22, 0x05	; 5
 2ae:	88 e5       	ldi	r24, 0x58	; 88
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 83 04 	call	0x906	; 0x906 <LCDstring>
 2b6:	08 95       	ret

000002b8 <fsm_init>:

void fsm_init(void){
	state = ST_IDLE;
 2b8:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <state>
	lcd_idle();
 2bc:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_idle>
 2c0:	08 95       	ret

000002c2 <clk_tick>:
}

void clk_tick(void)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	1f 92       	push	r1
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
	
	char key;
	
	switch(state)
 2cc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <state>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <clk_tick+0x14>
 2d4:	3f c0       	rjmp	.+126    	; 0x354 <clk_tick+0x92>
 2d6:	30 f4       	brcc	.+12     	; 0x2e4 <clk_tick+0x22>
 2d8:	88 23       	and	r24, r24
 2da:	69 f0       	breq	.+26     	; 0x2f6 <clk_tick+0x34>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	09 f4       	brne	.+2      	; 0x2e2 <clk_tick+0x20>
 2e0:	70 c0       	rjmp	.+224    	; 0x3c2 <clk_tick+0x100>
 2e2:	21 c1       	rjmp	.+578    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 2e4:	84 30       	cpi	r24, 0x04	; 4
 2e6:	09 f4       	brne	.+2      	; 0x2ea <clk_tick+0x28>
 2e8:	e3 c0       	rjmp	.+454    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 2ea:	08 f4       	brcc	.+2      	; 0x2ee <clk_tick+0x2c>
 2ec:	9b c0       	rjmp	.+310    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 2ee:	85 30       	cpi	r24, 0x05	; 5
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <clk_tick+0x32>
 2f2:	fc c0       	rjmp	.+504    	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 2f4:	18 c1       	rjmp	.+560    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
	{
	//Estado idle. Muestra "Presione * para comenzar..."
	case ST_IDLE:
		if(keypad_scan(&key) && key == '*'){
 2f6:	ce 01       	movw	r24, r28
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	0e 94 aa 02 	call	0x554	; 0x554 <keypad_scan>
 2fe:	88 23       	and	r24, r24
 300:	09 f4       	brne	.+2      	; 0x304 <clk_tick+0x42>
 302:	11 c1       	rjmp	.+546    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	8a 32       	cpi	r24, 0x2A	; 42
 308:	09 f0       	breq	.+2      	; 0x30c <clk_tick+0x4a>
 30a:	0d c1       	rjmp	.+538    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
			dict_seed(ticksMS);
 30c:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <__data_end>
 310:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <__data_end+0x1>
 314:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end+0x2>
 318:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x3>
 31c:	0e 94 1c 03 	call	0x638	; 0x638 <dict_seed>
			dict_get_random_word(secretWord);
 320:	88 e5       	ldi	r24, 0x58	; 88
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 20 03 	call	0x640	; 0x640 <dict_get_random_word>
			lcd_show_word();
 328:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_show_word>
			t_ref = ticksMS;
 32c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 330:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
 334:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <__data_end+0x2>
 338:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <__data_end+0x3>
 33c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <t_ref>
 340:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <t_ref+0x1>
 344:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <t_ref+0x2>
 348:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <t_ref+0x3>
			index = errors = 0;
			char_ready = 0;
			state = ST_SHOW_WORD;
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
 352:	e9 c0       	rjmp	.+466    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
			return;		
		}
		break;

	case ST_SHOW_WORD:
		if (ticksMS - t_ref >= 2000) {
 354:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 358:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
 35c:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <__data_end+0x2>
 360:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <__data_end+0x3>
 364:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <t_ref>
 368:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <t_ref+0x1>
 36c:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <t_ref+0x2>
 370:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <t_ref+0x3>
 374:	84 1b       	sub	r24, r20
 376:	95 0b       	sbc	r25, r21
 378:	a6 0b       	sbc	r26, r22
 37a:	b7 0b       	sbc	r27, r23
 37c:	80 3d       	cpi	r24, 0xD0	; 208
 37e:	97 40       	sbci	r25, 0x07	; 7
 380:	a1 05       	cpc	r26, r1
 382:	b1 05       	cpc	r27, r1
 384:	08 f4       	brcc	.+2      	; 0x388 <clk_tick+0xc6>
 386:	cf c0       	rjmp	.+414    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
			lcd_prepare_input();
 388:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_prepare_input>
			t_ref = ticksMS;
 38c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 390:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
 394:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <__data_end+0x2>
 398:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <__data_end+0x3>
 39c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <t_ref>
 3a0:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <t_ref+0x1>
 3a4:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <t_ref+0x2>
 3a8:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <t_ref+0x3>
			memset(typedWord, 0, sizeof(typedWord));  // Limpiar buffer de entrada
 3ac:	86 e0       	ldi	r24, 0x06	; 6
 3ae:	ee e4       	ldi	r30, 0x4E	; 78
 3b0:	f1 e0       	ldi	r31, 0x01	; 1
 3b2:	df 01       	movw	r26, r30
 3b4:	1d 92       	st	X+, r1
 3b6:	8a 95       	dec	r24
 3b8:	e9 f7       	brne	.-6      	; 0x3b4 <clk_tick+0xf2>
			state = ST_TYPING;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
 3c0:	b2 c0       	rjmp	.+356    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
		}
		break;
	

	case ST_TYPING:
		if(keypad_scan(&key)) {
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	0e 94 aa 02 	call	0x554	; 0x554 <keypad_scan>
 3ca:	88 23       	and	r24, r24
 3cc:	31 f1       	breq	.+76     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			static char lastKeyPressed = '\0';

			if(key != lastKeyPressed) {
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <lastKeyPressed.2015>
 3d4:	89 17       	cp	r24, r25
 3d6:	09 f1       	breq	.+66     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				lastKeyPressed = key;
 3d8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <lastKeyPressed.2015>
				asciiDigits[asciiIndex] = key;
 3dc:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <asciiIndex>
 3e0:	e2 2f       	mov	r30, r18
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	e5 5b       	subi	r30, 0xB5	; 181
 3e6:	fe 4f       	sbci	r31, 0xFE	; 254
 3e8:	80 83       	st	Z, r24
				asciiIndex++;
 3ea:	2f 5f       	subi	r18, 0xFF	; 255
				asciiIndex = asciiIndex % 3;
 3ec:	9b ea       	ldi	r25, 0xAB	; 171
 3ee:	29 9f       	mul	r18, r25
 3f0:	91 2d       	mov	r25, r1
 3f2:	11 24       	eor	r1, r1
 3f4:	96 95       	lsr	r25
 3f6:	39 2f       	mov	r19, r25
 3f8:	33 0f       	add	r19, r19
 3fa:	93 0f       	add	r25, r19
 3fc:	29 1b       	sub	r18, r25
 3fe:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <asciiIndex>
				lastCharTyped = digitsToAscii((uint8_t*)asciiDigits, asciiIndex);
				LCDsendChar(key);
 402:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCDsendChar>

				if(key == '#') {
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	83 32       	cpi	r24, 0x23	; 35
 40a:	39 f4       	brne	.+14     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
					asciiIndex = 0;
 40c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <asciiIndex>
					LCDclr();
 410:	0e 94 7f 04 	call	0x8fe	; 0x8fe <LCDclr>
					state = ST_CHECK;
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
				}
			}
		}

		// MOVER AQUÃ PARA DETECTAR CUANDO SE SUELTA LA TECLA
		if(!keypad_scan(&dummyKey)) {
 41a:	89 e4       	ldi	r24, 0x49	; 73
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 aa 02 	call	0x554	; 0x554 <keypad_scan>
 422:	81 c0       	rjmp	.+258    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
		}
	break;

	
	case ST_CHECK:
	if (strcmp(secretWord, typedWord) == 0) {
 424:	6e e4       	ldi	r22, 0x4E	; 78
 426:	71 e0       	ldi	r23, 0x01	; 1
 428:	88 e5       	ldi	r24, 0x58	; 88
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0e 94 d0 05 	call	0xba0	; 0xba0 <strcmp>
 430:	89 2b       	or	r24, r25
 432:	f9 f4       	brne	.+62     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		state = ST_VICTORY;
 434:	84 e0       	ldi	r24, 0x04	; 4
 436:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
		t_ref = ticksMS;
 43a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 43e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
 442:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <__data_end+0x2>
 446:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <__data_end+0x3>
 44a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <t_ref>
 44e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <t_ref+0x1>
 452:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <t_ref+0x2>
 456:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <t_ref+0x3>
		LCDclr();
 45a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <LCDclr>
		LCDGotoXY(0,0);
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 9b 04 	call	0x936	; 0x936 <LCDGotoXY>
		LCDstring((uint8_t *)"CORRECTO!", 9);
 466:	69 e0       	ldi	r22, 0x09	; 9
 468:	81 e2       	ldi	r24, 0x21	; 33
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	0e 94 83 04 	call	0x906	; 0x906 <LCDstring>
 470:	5a c0       	rjmp	.+180    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
		} else {
		state = ST_DEFEAT;
 472:	85 e0       	ldi	r24, 0x05	; 5
 474:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
		t_ref = ticksMS;
 478:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 47c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
 480:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <__data_end+0x2>
 484:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <__data_end+0x3>
 488:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <t_ref>
 48c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <t_ref+0x1>
 490:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <t_ref+0x2>
 494:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <t_ref+0x3>
		LCDclr();
 498:	0e 94 7f 04 	call	0x8fe	; 0x8fe <LCDclr>
		LCDGotoXY(0,0);
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 9b 04 	call	0x936	; 0x936 <LCDGotoXY>
		LCDstring((uint8_t *)"INCORRECTO!", 11);
 4a4:	6b e0       	ldi	r22, 0x0B	; 11
 4a6:	8f e1       	ldi	r24, 0x1F	; 31
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 83 04 	call	0x906	; 0x906 <LCDstring>
 4ae:	3b c0       	rjmp	.+118    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
	}
	break;
	
	case ST_VICTORY:
	if (ticksMS - t_ref >= TIME_FINAL) {
 4b0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 4b4:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
 4b8:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <__data_end+0x2>
 4bc:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <__data_end+0x3>
 4c0:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <t_ref>
 4c4:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <t_ref+0x1>
 4c8:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <t_ref+0x2>
 4cc:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <t_ref+0x3>
 4d0:	84 1b       	sub	r24, r20
 4d2:	95 0b       	sbc	r25, r21
 4d4:	a6 0b       	sbc	r26, r22
 4d6:	b7 0b       	sbc	r27, r23
 4d8:	88 38       	cpi	r24, 0x88	; 136
 4da:	93 41       	sbci	r25, 0x13	; 19
 4dc:	a1 05       	cpc	r26, r1
 4de:	b1 05       	cpc	r27, r1
 4e0:	10 f1       	brcs	.+68     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
		state = ST_IDLE;
 4e2:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <state>
		lcd_idle();
 4e6:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_idle>
 4ea:	1d c0       	rjmp	.+58     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
	}
	break;

	case ST_DEFEAT:
	if (ticksMS - t_ref >= TIME_FINAL) {
 4ec:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 4f0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
 4f4:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <__data_end+0x2>
 4f8:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <__data_end+0x3>
 4fc:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <t_ref>
 500:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <t_ref+0x1>
 504:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <t_ref+0x2>
 508:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <t_ref+0x3>
 50c:	84 1b       	sub	r24, r20
 50e:	95 0b       	sbc	r25, r21
 510:	a6 0b       	sbc	r26, r22
 512:	b7 0b       	sbc	r27, r23
 514:	88 38       	cpi	r24, 0x88	; 136
 516:	93 41       	sbci	r25, 0x13	; 19
 518:	a1 05       	cpc	r26, r1
 51a:	b1 05       	cpc	r27, r1
 51c:	20 f0       	brcs	.+8      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
		state = ST_IDLE;
 51e:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <state>
		lcd_idle();
 522:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_idle>



			
}
 526:	0f 90       	pop	r0
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <keypad_init>:
static const uint8_t col_bits[4] = { PD3, PD5, PD4, PD2 };

void keypad_init(void)
{
    /* filas como entrada con pull-up */
    DDRB &= ~(_BV(PB4) | _BV(PB3) | _BV(PB0));
 52e:	84 b1       	in	r24, 0x04	; 4
 530:	86 7e       	andi	r24, 0xE6	; 230
 532:	84 b9       	out	0x04, r24	; 4
    PORTB |=  _BV(PB4) | _BV(PB3) | _BV(PB0);
 534:	85 b1       	in	r24, 0x05	; 5
 536:	89 61       	ori	r24, 0x19	; 25
 538:	85 b9       	out	0x05, r24	; 5

    DDRD &= ~_BV(PD7);
 53a:	8a b1       	in	r24, 0x0a	; 10
 53c:	8f 77       	andi	r24, 0x7F	; 127
 53e:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  _BV(PD7);
 540:	8b b1       	in	r24, 0x0b	; 11
 542:	80 68       	ori	r24, 0x80	; 128
 544:	8b b9       	out	0x0b, r24	; 11

    /* columnas en alta Z + pull-up mientras no se escanean */
    DDRD  &= ~(_BV(PD2)|_BV(PD3)|_BV(PD4)|_BV(PD5));
 546:	8a b1       	in	r24, 0x0a	; 10
 548:	83 7c       	andi	r24, 0xC3	; 195
 54a:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (_BV(PD2)|_BV(PD3)|_BV(PD4)|_BV(PD5));
 54c:	8b b1       	in	r24, 0x0b	; 11
 54e:	8c 63       	ori	r24, 0x3C	; 60
 550:	8b b9       	out	0x0b, r24	; 11
 552:	08 95       	ret

00000554 <keypad_scan>:
}

uint8_t keypad_scan(char *key)
{
    /* Recorremos las 4 columnas */
    for (uint8_t c = 0; c < 4; c++)
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	6b c0       	rjmp	.+214    	; 0x62e <keypad_scan+0xda>
    {
        //Columna c a LOW (los demás quedan en pull-up)
        DDRD  |=  _BV(col_bits[c]);      //Configurar como salida
 558:	7a b1       	in	r23, 0x0a	; 10
 55a:	46 2f       	mov	r20, r22
 55c:	50 e0       	ldi	r21, 0x00	; 0
 55e:	fa 01       	movw	r30, r20
 560:	e5 5d       	subi	r30, 0xD5	; 213
 562:	fe 4f       	sbci	r31, 0xFE	; 254
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	00 80       	ld	r0, Z
 56a:	02 c0       	rjmp	.+4      	; 0x570 <keypad_scan+0x1c>
 56c:	22 0f       	add	r18, r18
 56e:	33 1f       	adc	r19, r19
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <keypad_scan+0x18>
 574:	37 2f       	mov	r19, r23
 576:	32 2b       	or	r19, r18
 578:	3a b9       	out	0x0a, r19	; 10
        PORTD &= ~_BV(col_bits[c]);      
 57a:	3b b1       	in	r19, 0x0b	; 11
 57c:	20 95       	com	r18
 57e:	23 23       	and	r18, r19
 580:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 582:	20 e1       	ldi	r18, 0x10	; 16
 584:	2a 95       	dec	r18
 586:	f1 f7       	brne	.-4      	; 0x584 <keypad_scan+0x30>
        _delay_us(3);                    

        /* 2. Recorremos las 4 filas */
        for (uint8_t r = 0; r < 4; r++)
 588:	e0 e0       	ldi	r30, 0x00	; 0
 58a:	3b c0       	rjmp	.+118    	; 0x602 <keypad_scan+0xae>
        {
            uint8_t pressed;

            if (r == 3)  /* FILA3 = PD7 */
 58c:	e3 30       	cpi	r30, 0x03	; 3
 58e:	31 f4       	brne	.+12     	; 0x59c <keypad_scan+0x48>
                pressed = !(PIND & _BV(PD7));
 590:	29 b1       	in	r18, 0x09	; 9
 592:	20 95       	com	r18
 594:	22 1f       	adc	r18, r18
 596:	22 27       	eor	r18, r18
 598:	22 1f       	adc	r18, r18
 59a:	0f c0       	rjmp	.+30     	; 0x5ba <keypad_scan+0x66>
            else         /* FILA0-2  en PORTB */
                pressed = !(PINB & _BV(row_bits[r]));
 59c:	23 b1       	in	r18, 0x03	; 3
 59e:	ae 2f       	mov	r26, r30
 5a0:	b0 e0       	ldi	r27, 0x00	; 0
 5a2:	a1 5d       	subi	r26, 0xD1	; 209
 5a4:	be 4f       	sbci	r27, 0xFE	; 254
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	0c 90       	ld	r0, X
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <keypad_scan+0x5c>
 5ac:	35 95       	asr	r19
 5ae:	27 95       	ror	r18
 5b0:	0a 94       	dec	r0
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <keypad_scan+0x58>
 5b4:	71 e0       	ldi	r23, 0x01	; 1
 5b6:	27 27       	eor	r18, r23
 5b8:	21 70       	andi	r18, 0x01	; 1

            if (pressed)
 5ba:	22 23       	and	r18, r18
 5bc:	09 f1       	breq	.+66     	; 0x600 <keypad_scan+0xac>
            {
                *key = keymap[r][c];
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	ee 0f       	add	r30, r30
 5c2:	ff 1f       	adc	r31, r31
 5c4:	ee 0f       	add	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	ed 5c       	subi	r30, 0xCD	; 205
 5ca:	fe 4f       	sbci	r31, 0xFE	; 254
 5cc:	e4 0f       	add	r30, r20
 5ce:	f5 1f       	adc	r31, r21
 5d0:	20 81       	ld	r18, Z
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18

                /* liberar la columna antes de salir */
                PORTD |=  _BV(col_bits[c]);   /* pull-up otra vez */
 5d6:	2b b1       	in	r18, 0x0b	; 11
 5d8:	fa 01       	movw	r30, r20
 5da:	e5 5d       	subi	r30, 0xD5	; 213
 5dc:	fe 4f       	sbci	r31, 0xFE	; 254
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	00 80       	ld	r0, Z
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <keypad_scan+0x96>
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	0a 94       	dec	r0
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <keypad_scan+0x92>
 5ee:	92 2f       	mov	r25, r18
 5f0:	98 2b       	or	r25, r24
 5f2:	9b b9       	out	0x0b, r25	; 11
                DDRD  &= ~_BV(col_bits[c]);   /* alta Z           */
 5f4:	9a b1       	in	r25, 0x0a	; 10
 5f6:	80 95       	com	r24
 5f8:	89 23       	and	r24, r25
 5fa:	8a b9       	out	0x0a, r24	; 10
                return 1;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	08 95       	ret
        DDRD  |=  _BV(col_bits[c]);      //Configurar como salida
        PORTD &= ~_BV(col_bits[c]);      
        _delay_us(3);                    

        /* 2. Recorremos las 4 filas */
        for (uint8_t r = 0; r < 4; r++)
 600:	ef 5f       	subi	r30, 0xFF	; 255
 602:	e4 30       	cpi	r30, 0x04	; 4
 604:	18 f2       	brcs	.-122    	; 0x58c <keypad_scan+0x38>
                return 1;
            }
        }

        /* 3. Ninguna tecla en esta columna ? la liberamos */
        PORTD |=  _BV(col_bits[c]);
 606:	7b b1       	in	r23, 0x0b	; 11
 608:	fa 01       	movw	r30, r20
 60a:	e5 5d       	subi	r30, 0xD5	; 213
 60c:	fe 4f       	sbci	r31, 0xFE	; 254
 60e:	21 e0       	ldi	r18, 0x01	; 1
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	00 80       	ld	r0, Z
 614:	02 c0       	rjmp	.+4      	; 0x61a <keypad_scan+0xc6>
 616:	22 0f       	add	r18, r18
 618:	33 1f       	adc	r19, r19
 61a:	0a 94       	dec	r0
 61c:	e2 f7       	brpl	.-8      	; 0x616 <keypad_scan+0xc2>
 61e:	37 2f       	mov	r19, r23
 620:	32 2b       	or	r19, r18
 622:	3b b9       	out	0x0b, r19	; 11
        DDRD  &= ~_BV(col_bits[c]);
 624:	3a b1       	in	r19, 0x0a	; 10
 626:	20 95       	com	r18
 628:	23 23       	and	r18, r19
 62a:	2a b9       	out	0x0a, r18	; 10
}

uint8_t keypad_scan(char *key)
{
    /* Recorremos las 4 columnas */
    for (uint8_t c = 0; c < 4; c++)
 62c:	6f 5f       	subi	r22, 0xFF	; 255
 62e:	64 30       	cpi	r22, 0x04	; 4
 630:	08 f4       	brcc	.+2      	; 0x634 <keypad_scan+0xe0>
 632:	92 cf       	rjmp	.-220    	; 0x558 <keypad_scan+0x4>

        /* 3. Ninguna tecla en esta columna ? la liberamos */
        PORTD |=  _BV(col_bits[c]);
        DDRD  &= ~_BV(col_bits[c]);
    }
    return 0;   
 634:	80 e0       	ldi	r24, 0x00	; 0
}
 636:	08 95       	ret

00000638 <dict_seed>:

//Toma como "semilla" el valor actual de 16-bit del clock al momento que se llama el metodo 
//para la randomizacion de la palabra
void dict_seed(uint32_t s)
{
	srand((unsigned)s);
 638:	cb 01       	movw	r24, r22
 63a:	0e 94 bc 05 	call	0xb78	; 0xb78 <srand>
 63e:	08 95       	ret

00000640 <dict_get_random_word>:
}

void dict_get_random_word(char *wrd)
{
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	ec 01       	movw	r28, r24
	uint8_t idx = (uint8_t)(rand() % DICT_SIZE);   
 646:	0e 94 b7 05 	call	0xb6e	; 0xb6e <rand>
 64a:	ac 01       	movw	r20, r24
 64c:	9c 01       	movw	r18, r24
 64e:	af ea       	ldi	r26, 0xAF	; 175
 650:	b7 e4       	ldi	r27, 0x47	; 71
 652:	0e 94 5c 05 	call	0xab8	; 0xab8 <__umulhisi3>
 656:	28 1b       	sub	r18, r24
 658:	39 0b       	sbc	r19, r25
 65a:	36 95       	lsr	r19
 65c:	27 95       	ror	r18
 65e:	82 0f       	add	r24, r18
 660:	93 1f       	adc	r25, r19
 662:	92 95       	swap	r25
 664:	82 95       	swap	r24
 666:	8f 70       	andi	r24, 0x0F	; 15
 668:	89 27       	eor	r24, r25
 66a:	9f 70       	andi	r25, 0x0F	; 15
 66c:	89 27       	eor	r24, r25
 66e:	69 e1       	ldi	r22, 0x19	; 25
 670:	68 9f       	mul	r22, r24
 672:	90 01       	movw	r18, r0
 674:	69 9f       	mul	r22, r25
 676:	30 0d       	add	r19, r0
 678:	11 24       	eor	r1, r1
 67a:	ca 01       	movw	r24, r20
 67c:	82 1b       	sub	r24, r18
 67e:	93 0b       	sbc	r25, r19
	memcpy_P(wrd, dict[idx], WORD_BUF);            
 680:	99 27       	eor	r25, r25
 682:	bc 01       	movw	r22, r24
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	86 0f       	add	r24, r22
 68a:	97 1f       	adc	r25, r23
 68c:	bc 01       	movw	r22, r24
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	68 59       	subi	r22, 0x98	; 152
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	46 e0       	ldi	r20, 0x06	; 6
 698:	50 e0       	ldi	r21, 0x00	; 0
 69a:	ce 01       	movw	r24, r28
 69c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <memcpy_P>
}
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 6a6:	65 b1       	in	r22, 0x05	; 5
 6a8:	98 2f       	mov	r25, r24
 6aa:	90 74       	andi	r25, 0x40	; 64
 6ac:	49 2f       	mov	r20, r25
 6ae:	50 e0       	ldi	r21, 0x00	; 0
 6b0:	55 95       	asr	r21
 6b2:	47 95       	ror	r20
 6b4:	55 95       	asr	r21
 6b6:	47 95       	ror	r20
 6b8:	55 95       	asr	r21
 6ba:	47 95       	ror	r20
 6bc:	55 95       	asr	r21
 6be:	47 95       	ror	r20
 6c0:	98 2f       	mov	r25, r24
 6c2:	90 78       	andi	r25, 0x80	; 128
 6c4:	29 2f       	mov	r18, r25
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	02 2e       	mov	r0, r18
 6ca:	23 2f       	mov	r18, r19
 6cc:	00 0c       	add	r0, r0
 6ce:	22 1f       	adc	r18, r18
 6d0:	33 0b       	sbc	r19, r19
 6d2:	00 0c       	add	r0, r0
 6d4:	22 1f       	adc	r18, r18
 6d6:	33 1f       	adc	r19, r19
 6d8:	96 2f       	mov	r25, r22
 6da:	99 7f       	andi	r25, 0xF9	; 249
 6dc:	49 2b       	or	r20, r25
 6de:	24 2b       	or	r18, r20
 6e0:	25 b9       	out	0x05, r18	; 5
 6e2:	68 b1       	in	r22, 0x08	; 8
 6e4:	98 2f       	mov	r25, r24
 6e6:	90 71       	andi	r25, 0x10	; 16
 6e8:	49 2f       	mov	r20, r25
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	55 95       	asr	r21
 6ee:	47 95       	ror	r20
 6f0:	55 95       	asr	r21
 6f2:	47 95       	ror	r20
 6f4:	55 95       	asr	r21
 6f6:	47 95       	ror	r20
 6f8:	98 2f       	mov	r25, r24
 6fa:	90 72       	andi	r25, 0x20	; 32
 6fc:	29 2f       	mov	r18, r25
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	35 95       	asr	r19
 702:	27 95       	ror	r18
 704:	35 95       	asr	r19
 706:	27 95       	ror	r18
 708:	35 95       	asr	r19
 70a:	27 95       	ror	r18
 70c:	96 2f       	mov	r25, r22
 70e:	99 7f       	andi	r25, 0xF9	; 249
 710:	49 2b       	or	r20, r25
 712:	24 2b       	or	r18, r20
 714:	28 b9       	out	0x08, r18	; 8
 716:	9b b1       	in	r25, 0x0b	; 11
 718:	92 60       	ori	r25, 0x02	; 2
 71a:	9b b9       	out	0x0b, r25	; 11
 71c:	9b b1       	in	r25, 0x0b	; 11
 71e:	91 60       	ori	r25, 0x01	; 1
 720:	9b b9       	out	0x0b, r25	; 11
 722:	25 ed       	ldi	r18, 0xD5	; 213
 724:	2a 95       	dec	r18
 726:	f1 f7       	brne	.-4      	; 0x724 <LCDsendChar+0x7e>
 728:	00 00       	nop
 72a:	9b b1       	in	r25, 0x0b	; 11
 72c:	9e 7f       	andi	r25, 0xFE	; 254
 72e:	9b b9       	out	0x0b, r25	; 11
 730:	9b b1       	in	r25, 0x0b	; 11
 732:	9d 7f       	andi	r25, 0xFD	; 253
 734:	9b b9       	out	0x0b, r25	; 11
 736:	95 ed       	ldi	r25, 0xD5	; 213
 738:	9a 95       	dec	r25
 73a:	f1 f7       	brne	.-4      	; 0x738 <LCDsendChar+0x92>
 73c:	00 00       	nop
 73e:	65 b1       	in	r22, 0x05	; 5
 740:	20 e1       	ldi	r18, 0x10	; 16
 742:	82 9f       	mul	r24, r18
 744:	c0 01       	movw	r24, r0
 746:	11 24       	eor	r1, r1
 748:	ac 01       	movw	r20, r24
 74a:	40 74       	andi	r20, 0x40	; 64
 74c:	55 27       	eor	r21, r21
 74e:	55 95       	asr	r21
 750:	47 95       	ror	r20
 752:	55 95       	asr	r21
 754:	47 95       	ror	r20
 756:	55 95       	asr	r21
 758:	47 95       	ror	r20
 75a:	55 95       	asr	r21
 75c:	47 95       	ror	r20
 75e:	9c 01       	movw	r18, r24
 760:	20 78       	andi	r18, 0x80	; 128
 762:	33 27       	eor	r19, r19
 764:	02 2e       	mov	r0, r18
 766:	23 2f       	mov	r18, r19
 768:	00 0c       	add	r0, r0
 76a:	22 1f       	adc	r18, r18
 76c:	33 0b       	sbc	r19, r19
 76e:	00 0c       	add	r0, r0
 770:	22 1f       	adc	r18, r18
 772:	33 1f       	adc	r19, r19
 774:	36 2f       	mov	r19, r22
 776:	39 7f       	andi	r19, 0xF9	; 249
 778:	43 2b       	or	r20, r19
 77a:	24 2b       	or	r18, r20
 77c:	25 b9       	out	0x05, r18	; 5
 77e:	48 b1       	in	r20, 0x08	; 8
 780:	9c 01       	movw	r18, r24
 782:	20 71       	andi	r18, 0x10	; 16
 784:	33 27       	eor	r19, r19
 786:	35 95       	asr	r19
 788:	27 95       	ror	r18
 78a:	35 95       	asr	r19
 78c:	27 95       	ror	r18
 78e:	35 95       	asr	r19
 790:	27 95       	ror	r18
 792:	80 72       	andi	r24, 0x20	; 32
 794:	99 27       	eor	r25, r25
 796:	95 95       	asr	r25
 798:	87 95       	ror	r24
 79a:	95 95       	asr	r25
 79c:	87 95       	ror	r24
 79e:	95 95       	asr	r25
 7a0:	87 95       	ror	r24
 7a2:	94 2f       	mov	r25, r20
 7a4:	99 7f       	andi	r25, 0xF9	; 249
 7a6:	29 2b       	or	r18, r25
 7a8:	82 2b       	or	r24, r18
 7aa:	88 b9       	out	0x08, r24	; 8
 7ac:	8b b1       	in	r24, 0x0b	; 11
 7ae:	82 60       	ori	r24, 0x02	; 2
 7b0:	8b b9       	out	0x0b, r24	; 11
 7b2:	8b b1       	in	r24, 0x0b	; 11
 7b4:	81 60       	ori	r24, 0x01	; 1
 7b6:	8b b9       	out	0x0b, r24	; 11
 7b8:	85 ed       	ldi	r24, 0xD5	; 213
 7ba:	8a 95       	dec	r24
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <LCDsendChar+0x114>
 7be:	00 00       	nop
 7c0:	8b b1       	in	r24, 0x0b	; 11
 7c2:	8e 7f       	andi	r24, 0xFE	; 254
 7c4:	8b b9       	out	0x0b, r24	; 11
 7c6:	8b b1       	in	r24, 0x0b	; 11
 7c8:	8d 7f       	andi	r24, 0xFD	; 253
 7ca:	8b b9       	out	0x0b, r24	; 11
 7cc:	95 ed       	ldi	r25, 0xD5	; 213
 7ce:	9a 95       	dec	r25
 7d0:	f1 f7       	brne	.-4      	; 0x7ce <LCDsendChar+0x128>
 7d2:	00 00       	nop
 7d4:	08 95       	ret

000007d6 <LCDsendCommand>:
 7d6:	65 b1       	in	r22, 0x05	; 5
 7d8:	98 2f       	mov	r25, r24
 7da:	90 74       	andi	r25, 0x40	; 64
 7dc:	49 2f       	mov	r20, r25
 7de:	50 e0       	ldi	r21, 0x00	; 0
 7e0:	55 95       	asr	r21
 7e2:	47 95       	ror	r20
 7e4:	55 95       	asr	r21
 7e6:	47 95       	ror	r20
 7e8:	55 95       	asr	r21
 7ea:	47 95       	ror	r20
 7ec:	55 95       	asr	r21
 7ee:	47 95       	ror	r20
 7f0:	98 2f       	mov	r25, r24
 7f2:	90 78       	andi	r25, 0x80	; 128
 7f4:	29 2f       	mov	r18, r25
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	02 2e       	mov	r0, r18
 7fa:	23 2f       	mov	r18, r19
 7fc:	00 0c       	add	r0, r0
 7fe:	22 1f       	adc	r18, r18
 800:	33 0b       	sbc	r19, r19
 802:	00 0c       	add	r0, r0
 804:	22 1f       	adc	r18, r18
 806:	33 1f       	adc	r19, r19
 808:	96 2f       	mov	r25, r22
 80a:	99 7f       	andi	r25, 0xF9	; 249
 80c:	49 2b       	or	r20, r25
 80e:	24 2b       	or	r18, r20
 810:	25 b9       	out	0x05, r18	; 5
 812:	68 b1       	in	r22, 0x08	; 8
 814:	98 2f       	mov	r25, r24
 816:	90 71       	andi	r25, 0x10	; 16
 818:	49 2f       	mov	r20, r25
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	55 95       	asr	r21
 81e:	47 95       	ror	r20
 820:	55 95       	asr	r21
 822:	47 95       	ror	r20
 824:	55 95       	asr	r21
 826:	47 95       	ror	r20
 828:	98 2f       	mov	r25, r24
 82a:	90 72       	andi	r25, 0x20	; 32
 82c:	29 2f       	mov	r18, r25
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	35 95       	asr	r19
 832:	27 95       	ror	r18
 834:	35 95       	asr	r19
 836:	27 95       	ror	r18
 838:	35 95       	asr	r19
 83a:	27 95       	ror	r18
 83c:	96 2f       	mov	r25, r22
 83e:	99 7f       	andi	r25, 0xF9	; 249
 840:	49 2b       	or	r20, r25
 842:	24 2b       	or	r18, r20
 844:	28 b9       	out	0x08, r18	; 8
 846:	9b b1       	in	r25, 0x0b	; 11
 848:	91 60       	ori	r25, 0x01	; 1
 84a:	9b b9       	out	0x0b, r25	; 11
 84c:	ef e9       	ldi	r30, 0x9F	; 159
 84e:	ff e0       	ldi	r31, 0x0F	; 15
 850:	31 97       	sbiw	r30, 0x01	; 1
 852:	f1 f7       	brne	.-4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 854:	00 c0       	rjmp	.+0      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 856:	00 00       	nop
 858:	9b b1       	in	r25, 0x0b	; 11
 85a:	9e 7f       	andi	r25, 0xFE	; 254
 85c:	9b b9       	out	0x0b, r25	; 11
 85e:	ef e9       	ldi	r30, 0x9F	; 159
 860:	ff e0       	ldi	r31, 0x0F	; 15
 862:	31 97       	sbiw	r30, 0x01	; 1
 864:	f1 f7       	brne	.-4      	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 866:	00 c0       	rjmp	.+0      	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 868:	00 00       	nop
 86a:	65 b1       	in	r22, 0x05	; 5
 86c:	f0 e1       	ldi	r31, 0x10	; 16
 86e:	8f 9f       	mul	r24, r31
 870:	c0 01       	movw	r24, r0
 872:	11 24       	eor	r1, r1
 874:	ac 01       	movw	r20, r24
 876:	40 74       	andi	r20, 0x40	; 64
 878:	55 27       	eor	r21, r21
 87a:	55 95       	asr	r21
 87c:	47 95       	ror	r20
 87e:	55 95       	asr	r21
 880:	47 95       	ror	r20
 882:	55 95       	asr	r21
 884:	47 95       	ror	r20
 886:	55 95       	asr	r21
 888:	47 95       	ror	r20
 88a:	9c 01       	movw	r18, r24
 88c:	20 78       	andi	r18, 0x80	; 128
 88e:	33 27       	eor	r19, r19
 890:	02 2e       	mov	r0, r18
 892:	23 2f       	mov	r18, r19
 894:	00 0c       	add	r0, r0
 896:	22 1f       	adc	r18, r18
 898:	33 0b       	sbc	r19, r19
 89a:	00 0c       	add	r0, r0
 89c:	22 1f       	adc	r18, r18
 89e:	33 1f       	adc	r19, r19
 8a0:	36 2f       	mov	r19, r22
 8a2:	39 7f       	andi	r19, 0xF9	; 249
 8a4:	43 2b       	or	r20, r19
 8a6:	24 2b       	or	r18, r20
 8a8:	25 b9       	out	0x05, r18	; 5
 8aa:	48 b1       	in	r20, 0x08	; 8
 8ac:	9c 01       	movw	r18, r24
 8ae:	20 71       	andi	r18, 0x10	; 16
 8b0:	33 27       	eor	r19, r19
 8b2:	35 95       	asr	r19
 8b4:	27 95       	ror	r18
 8b6:	35 95       	asr	r19
 8b8:	27 95       	ror	r18
 8ba:	35 95       	asr	r19
 8bc:	27 95       	ror	r18
 8be:	80 72       	andi	r24, 0x20	; 32
 8c0:	99 27       	eor	r25, r25
 8c2:	95 95       	asr	r25
 8c4:	87 95       	ror	r24
 8c6:	95 95       	asr	r25
 8c8:	87 95       	ror	r24
 8ca:	95 95       	asr	r25
 8cc:	87 95       	ror	r24
 8ce:	94 2f       	mov	r25, r20
 8d0:	99 7f       	andi	r25, 0xF9	; 249
 8d2:	29 2b       	or	r18, r25
 8d4:	82 2b       	or	r24, r18
 8d6:	88 b9       	out	0x08, r24	; 8
 8d8:	8b b1       	in	r24, 0x0b	; 11
 8da:	81 60       	ori	r24, 0x01	; 1
 8dc:	8b b9       	out	0x0b, r24	; 11
 8de:	8f e9       	ldi	r24, 0x9F	; 159
 8e0:	9f e0       	ldi	r25, 0x0F	; 15
 8e2:	01 97       	sbiw	r24, 0x01	; 1
 8e4:	f1 f7       	brne	.-4      	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8e8:	00 00       	nop
 8ea:	8b b1       	in	r24, 0x0b	; 11
 8ec:	8e 7f       	andi	r24, 0xFE	; 254
 8ee:	8b b9       	out	0x0b, r24	; 11
 8f0:	ef e9       	ldi	r30, 0x9F	; 159
 8f2:	ff e0       	ldi	r31, 0x0F	; 15
 8f4:	31 97       	sbiw	r30, 0x01	; 1
 8f6:	f1 f7       	brne	.-4      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8f8:	00 c0       	rjmp	.+0      	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8fa:	00 00       	nop
 8fc:	08 95       	ret

000008fe <LCDclr>:
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCDsendCommand>
 904:	08 95       	ret

00000906 <LCDstring>:
 906:	0f 93       	push	r16
 908:	1f 93       	push	r17
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	00 97       	sbiw	r24, 0x00	; 0
 910:	69 f0       	breq	.+26     	; 0x92c <LCDstring+0x26>
 912:	d6 2f       	mov	r29, r22
 914:	8c 01       	movw	r16, r24
 916:	c0 e0       	ldi	r28, 0x00	; 0
 918:	07 c0       	rjmp	.+14     	; 0x928 <LCDstring+0x22>
 91a:	f8 01       	movw	r30, r16
 91c:	ec 0f       	add	r30, r28
 91e:	f1 1d       	adc	r31, r1
 920:	80 81       	ld	r24, Z
 922:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCDsendChar>
 926:	cf 5f       	subi	r28, 0xFF	; 255
 928:	cd 17       	cp	r28, r29
 92a:	b8 f3       	brcs	.-18     	; 0x91a <LCDstring+0x14>
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	1f 91       	pop	r17
 932:	0f 91       	pop	r16
 934:	08 95       	ret

00000936 <LCDGotoXY>:
 936:	62 30       	cpi	r22, 0x02	; 2
 938:	31 f0       	breq	.+12     	; 0x946 <LCDGotoXY+0x10>
 93a:	63 30       	cpi	r22, 0x03	; 3
 93c:	31 f0       	breq	.+12     	; 0x94a <LCDGotoXY+0x14>
 93e:	61 30       	cpi	r22, 0x01	; 1
 940:	29 f4       	brne	.+10     	; 0x94c <LCDGotoXY+0x16>
 942:	80 5c       	subi	r24, 0xC0	; 192
 944:	03 c0       	rjmp	.+6      	; 0x94c <LCDGotoXY+0x16>
 946:	8c 5e       	subi	r24, 0xEC	; 236
 948:	01 c0       	rjmp	.+2      	; 0x94c <LCDGotoXY+0x16>
 94a:	8c 5a       	subi	r24, 0xAC	; 172
 94c:	80 68       	ori	r24, 0x80	; 128
 94e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCDsendCommand>
 952:	08 95       	ret

00000954 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 954:	ef 92       	push	r14
 956:	ff 92       	push	r15
 958:	0f 93       	push	r16
 95a:	1f 93       	push	r17
 95c:	cf 93       	push	r28
 95e:	df 93       	push	r29
 960:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 962:	86 2f       	mov	r24, r22
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	88 0f       	add	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	88 0f       	add	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	88 0f       	add	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
 974:	c0 e0       	ldi	r28, 0x00	; 0
 976:	d0 e0       	ldi	r29, 0x00	; 0
 978:	0d c0       	rjmp	.+26     	; 0x994 <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
 97a:	f7 01       	movw	r30, r14
 97c:	ec 0f       	add	r30, r28
 97e:	fd 1f       	adc	r31, r29
 980:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 982:	01 e0       	ldi	r16, 0x01	; 1
 984:	08 0f       	add	r16, r24
 986:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCDsendCommand>
		LCDsendChar(pcc);
 98a:	81 2f       	mov	r24, r17
 98c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 990:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 992:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 994:	c8 30       	cpi	r28, 0x08	; 8
 996:	d1 05       	cpc	r29, r1
 998:	80 f3       	brcs	.-32     	; 0x97a <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	1f 91       	pop	r17
 9a0:	0f 91       	pop	r16
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	08 95       	ret

000009a8 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9ac:	8f e5       	ldi	r24, 0x5F	; 95
 9ae:	9a ee       	ldi	r25, 0xEA	; 234
 9b0:	01 97       	sbiw	r24, 0x01	; 1
 9b2:	f1 f7       	brne	.-4      	; 0x9b0 <LCDinit+0x8>
 9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <LCDinit+0xe>
 9b6:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	//LDP=0x00;
	LCD_DATAWR(0x00);	
 9b8:	85 b1       	in	r24, 0x05	; 5
 9ba:	89 7f       	andi	r24, 0xF9	; 249
 9bc:	85 b9       	out	0x05, r24	; 5
 9be:	88 b1       	in	r24, 0x08	; 8
 9c0:	89 7f       	andi	r24, 0xF9	; 249
 9c2:	88 b9       	out	0x08, r24	; 8
	LCP=0x00;
 9c4:	1b b8       	out	0x0b, r1	; 11
	DDRC|=0x06;
 9c6:	87 b1       	in	r24, 0x07	; 7
 9c8:	86 60       	ori	r24, 0x06	; 6
 9ca:	87 b9       	out	0x07, r24	; 7
	DDRB|=0x06;
 9cc:	84 b1       	in	r24, 0x04	; 4
 9ce:	86 60       	ori	r24, 0x06	; 6
 9d0:	84 b9       	out	0x04, r24	; 4
	LDDR1|=1<<LCD_D7|1<<LCD_D6;
 9d2:	84 b1       	in	r24, 0x04	; 4
 9d4:	86 60       	ori	r24, 0x06	; 6
 9d6:	84 b9       	out	0x04, r24	; 4
	LDDR2|=1<<LCD_D4|1<<LCD_D5;
 9d8:	87 b1       	in	r24, 0x07	; 7
 9da:	86 60       	ori	r24, 0x06	; 6
 9dc:	87 b9       	out	0x07, r24	; 7
	//LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 9de:	8a b1       	in	r24, 0x0a	; 10
 9e0:	83 60       	ori	r24, 0x03	; 3
 9e2:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00110000);	
 9e4:	85 b1       	in	r24, 0x05	; 5
 9e6:	89 7f       	andi	r24, 0xF9	; 249
 9e8:	85 b9       	out	0x05, r24	; 5
 9ea:	88 b1       	in	r24, 0x08	; 8
 9ec:	86 60       	ori	r24, 0x06	; 6
 9ee:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 9f0:	8b b1       	in	r24, 0x0b	; 11
 9f2:	81 60       	ori	r24, 0x01	; 1
 9f4:	8b b9       	out	0x0b, r24	; 11
 9f6:	8f e9       	ldi	r24, 0x9F	; 159
 9f8:	9f e0       	ldi	r25, 0x0F	; 15
 9fa:	01 97       	sbiw	r24, 0x01	; 1
 9fc:	f1 f7       	brne	.-4      	; 0x9fa <LCDinit+0x52>
 9fe:	00 c0       	rjmp	.+0      	; 0xa00 <LCDinit+0x58>
 a00:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 a02:	8b b1       	in	r24, 0x0b	; 11
 a04:	8e 7f       	andi	r24, 0xFE	; 254
 a06:	8b b9       	out	0x0b, r24	; 11
 a08:	8f e9       	ldi	r24, 0x9F	; 159
 a0a:	9f e0       	ldi	r25, 0x0F	; 15
 a0c:	01 97       	sbiw	r24, 0x01	; 1
 a0e:	f1 f7       	brne	.-4      	; 0xa0c <LCDinit+0x64>
 a10:	00 c0       	rjmp	.+0      	; 0xa12 <LCDinit+0x6a>
 a12:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00110000);	
 a14:	85 b1       	in	r24, 0x05	; 5
 a16:	89 7f       	andi	r24, 0xF9	; 249
 a18:	85 b9       	out	0x05, r24	; 5
 a1a:	88 b1       	in	r24, 0x08	; 8
 a1c:	86 60       	ori	r24, 0x06	; 6
 a1e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 a20:	8b b1       	in	r24, 0x0b	; 11
 a22:	81 60       	ori	r24, 0x01	; 1
 a24:	8b b9       	out	0x0b, r24	; 11
 a26:	8f e9       	ldi	r24, 0x9F	; 159
 a28:	9f e0       	ldi	r25, 0x0F	; 15
 a2a:	01 97       	sbiw	r24, 0x01	; 1
 a2c:	f1 f7       	brne	.-4      	; 0xa2a <LCDinit+0x82>
 a2e:	00 c0       	rjmp	.+0      	; 0xa30 <LCDinit+0x88>
 a30:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 a32:	8b b1       	in	r24, 0x0b	; 11
 a34:	8e 7f       	andi	r24, 0xFE	; 254
 a36:	8b b9       	out	0x0b, r24	; 11
 a38:	8f e9       	ldi	r24, 0x9F	; 159
 a3a:	9f e0       	ldi	r25, 0x0F	; 15
 a3c:	01 97       	sbiw	r24, 0x01	; 1
 a3e:	f1 f7       	brne	.-4      	; 0xa3c <LCDinit+0x94>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <LCDinit+0x9a>
 a42:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00100000);	
 a44:	85 b1       	in	r24, 0x05	; 5
 a46:	89 7f       	andi	r24, 0xF9	; 249
 a48:	85 b9       	out	0x05, r24	; 5
 a4a:	88 b1       	in	r24, 0x08	; 8
 a4c:	89 7f       	andi	r24, 0xF9	; 249
 a4e:	84 60       	ori	r24, 0x04	; 4
 a50:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 a52:	8b b1       	in	r24, 0x0b	; 11
 a54:	81 60       	ori	r24, 0x01	; 1
 a56:	8b b9       	out	0x0b, r24	; 11
 a58:	8f e9       	ldi	r24, 0x9F	; 159
 a5a:	9f e0       	ldi	r25, 0x0F	; 15
 a5c:	01 97       	sbiw	r24, 0x01	; 1
 a5e:	f1 f7       	brne	.-4      	; 0xa5c <LCDinit+0xb4>
 a60:	00 c0       	rjmp	.+0      	; 0xa62 <LCDinit+0xba>
 a62:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 a64:	8b b1       	in	r24, 0x0b	; 11
 a66:	8e 7f       	andi	r24, 0xFE	; 254
 a68:	8b b9       	out	0x0b, r24	; 11
 a6a:	8f e9       	ldi	r24, 0x9F	; 159
 a6c:	9f e0       	ldi	r25, 0x0F	; 15
 a6e:	01 97       	sbiw	r24, 0x01	; 1
 a70:	f1 f7       	brne	.-4      	; 0xa6e <LCDinit+0xc6>
 a72:	00 c0       	rjmp	.+0      	; 0xa74 <LCDinit+0xcc>
 a74:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 a76:	88 e2       	ldi	r24, 0x28	; 40
 a78:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 a7c:	8c e0       	ldi	r24, 0x0C	; 12
 a7e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 a82:	60 e0       	ldi	r22, 0x00	; 0
 a84:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
 a86:	0a c0       	rjmp	.+20     	; 0xa9c <LCDinit+0xf4>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 a88:	d1 e0       	ldi	r29, 0x01	; 1
 a8a:	d6 0f       	add	r29, r22
 a8c:	8c 2f       	mov	r24, r28
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	82 50       	subi	r24, 0x02	; 2
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	0e 94 aa 04 	call	0x954	; 0x954 <LCDdefinechar>
		ch=ch+8;
 a98:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 a9a:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 a9c:	c0 34       	cpi	r28, 0x40	; 64
 a9e:	a0 f3       	brcs	.-24     	; 0xa88 <LCDinit+0xe0>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 aa0:	df 91       	pop	r29
 aa2:	cf 91       	pop	r28
 aa4:	08 95       	ret

00000aa6 <main>:



int main(void)
{	
	keypad_init();
 aa6:	0e 94 97 02 	call	0x52e	; 0x52e <keypad_init>
	LCDinit();
 aaa:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCDinit>
	timer_init();
 aae:	0e 94 be 00 	call	0x17c	; 0x17c <timer_init>
	fsm_init();	
 ab2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <fsm_init>
 ab6:	ff cf       	rjmp	.-2      	; 0xab6 <main+0x10>

00000ab8 <__umulhisi3>:
 ab8:	a2 9f       	mul	r26, r18
 aba:	b0 01       	movw	r22, r0
 abc:	b3 9f       	mul	r27, r19
 abe:	c0 01       	movw	r24, r0
 ac0:	a3 9f       	mul	r26, r19
 ac2:	70 0d       	add	r23, r0
 ac4:	81 1d       	adc	r24, r1
 ac6:	11 24       	eor	r1, r1
 ac8:	91 1d       	adc	r25, r1
 aca:	b2 9f       	mul	r27, r18
 acc:	70 0d       	add	r23, r0
 ace:	81 1d       	adc	r24, r1
 ad0:	11 24       	eor	r1, r1
 ad2:	91 1d       	adc	r25, r1
 ad4:	08 95       	ret

00000ad6 <do_rand>:
 ad6:	8f 92       	push	r8
 ad8:	9f 92       	push	r9
 ada:	af 92       	push	r10
 adc:	bf 92       	push	r11
 ade:	cf 92       	push	r12
 ae0:	df 92       	push	r13
 ae2:	ef 92       	push	r14
 ae4:	ff 92       	push	r15
 ae6:	cf 93       	push	r28
 ae8:	df 93       	push	r29
 aea:	ec 01       	movw	r28, r24
 aec:	68 81       	ld	r22, Y
 aee:	79 81       	ldd	r23, Y+1	; 0x01
 af0:	8a 81       	ldd	r24, Y+2	; 0x02
 af2:	9b 81       	ldd	r25, Y+3	; 0x03
 af4:	61 15       	cp	r22, r1
 af6:	71 05       	cpc	r23, r1
 af8:	81 05       	cpc	r24, r1
 afa:	91 05       	cpc	r25, r1
 afc:	21 f4       	brne	.+8      	; 0xb06 <do_rand+0x30>
 afe:	64 e2       	ldi	r22, 0x24	; 36
 b00:	79 ed       	ldi	r23, 0xD9	; 217
 b02:	8b e5       	ldi	r24, 0x5B	; 91
 b04:	97 e0       	ldi	r25, 0x07	; 7
 b06:	2d e1       	ldi	r18, 0x1D	; 29
 b08:	33 ef       	ldi	r19, 0xF3	; 243
 b0a:	41 e0       	ldi	r20, 0x01	; 1
 b0c:	50 e0       	ldi	r21, 0x00	; 0
 b0e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__divmodsi4>
 b12:	49 01       	movw	r8, r18
 b14:	5a 01       	movw	r10, r20
 b16:	9b 01       	movw	r18, r22
 b18:	ac 01       	movw	r20, r24
 b1a:	a7 ea       	ldi	r26, 0xA7	; 167
 b1c:	b1 e4       	ldi	r27, 0x41	; 65
 b1e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__muluhisi3>
 b22:	6b 01       	movw	r12, r22
 b24:	7c 01       	movw	r14, r24
 b26:	ac ee       	ldi	r26, 0xEC	; 236
 b28:	b4 ef       	ldi	r27, 0xF4	; 244
 b2a:	a5 01       	movw	r20, r10
 b2c:	94 01       	movw	r18, r8
 b2e:	0e 94 06 06 	call	0xc0c	; 0xc0c <__mulohisi3>
 b32:	dc 01       	movw	r26, r24
 b34:	cb 01       	movw	r24, r22
 b36:	8c 0d       	add	r24, r12
 b38:	9d 1d       	adc	r25, r13
 b3a:	ae 1d       	adc	r26, r14
 b3c:	bf 1d       	adc	r27, r15
 b3e:	b7 ff       	sbrs	r27, 7
 b40:	03 c0       	rjmp	.+6      	; 0xb48 <do_rand+0x72>
 b42:	01 97       	sbiw	r24, 0x01	; 1
 b44:	a1 09       	sbc	r26, r1
 b46:	b0 48       	sbci	r27, 0x80	; 128
 b48:	88 83       	st	Y, r24
 b4a:	99 83       	std	Y+1, r25	; 0x01
 b4c:	aa 83       	std	Y+2, r26	; 0x02
 b4e:	bb 83       	std	Y+3, r27	; 0x03
 b50:	9f 77       	andi	r25, 0x7F	; 127
 b52:	df 91       	pop	r29
 b54:	cf 91       	pop	r28
 b56:	ff 90       	pop	r15
 b58:	ef 90       	pop	r14
 b5a:	df 90       	pop	r13
 b5c:	cf 90       	pop	r12
 b5e:	bf 90       	pop	r11
 b60:	af 90       	pop	r10
 b62:	9f 90       	pop	r9
 b64:	8f 90       	pop	r8
 b66:	08 95       	ret

00000b68 <rand_r>:
 b68:	0e 94 6b 05 	call	0xad6	; 0xad6 <do_rand>
 b6c:	08 95       	ret

00000b6e <rand>:
 b6e:	80 e0       	ldi	r24, 0x00	; 0
 b70:	91 e0       	ldi	r25, 0x01	; 1
 b72:	0e 94 6b 05 	call	0xad6	; 0xad6 <do_rand>
 b76:	08 95       	ret

00000b78 <srand>:
 b78:	a0 e0       	ldi	r26, 0x00	; 0
 b7a:	b0 e0       	ldi	r27, 0x00	; 0
 b7c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 b80:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 b84:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 b88:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 b8c:	08 95       	ret

00000b8e <memcpy_P>:
 b8e:	fb 01       	movw	r30, r22
 b90:	dc 01       	movw	r26, r24
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <memcpy_P+0xa>
 b94:	05 90       	lpm	r0, Z+
 b96:	0d 92       	st	X+, r0
 b98:	41 50       	subi	r20, 0x01	; 1
 b9a:	50 40       	sbci	r21, 0x00	; 0
 b9c:	d8 f7       	brcc	.-10     	; 0xb94 <memcpy_P+0x6>
 b9e:	08 95       	ret

00000ba0 <strcmp>:
 ba0:	fb 01       	movw	r30, r22
 ba2:	dc 01       	movw	r26, r24
 ba4:	8d 91       	ld	r24, X+
 ba6:	01 90       	ld	r0, Z+
 ba8:	80 19       	sub	r24, r0
 baa:	01 10       	cpse	r0, r1
 bac:	d9 f3       	breq	.-10     	; 0xba4 <strcmp+0x4>
 bae:	99 0b       	sbc	r25, r25
 bb0:	08 95       	ret

00000bb2 <__divmodsi4>:
 bb2:	05 2e       	mov	r0, r21
 bb4:	97 fb       	bst	r25, 7
 bb6:	1e f4       	brtc	.+6      	; 0xbbe <__divmodsi4+0xc>
 bb8:	00 94       	com	r0
 bba:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__negsi2>
 bbe:	57 fd       	sbrc	r21, 7
 bc0:	07 d0       	rcall	.+14     	; 0xbd0 <__divmodsi4_neg2>
 bc2:	0e 94 0b 06 	call	0xc16	; 0xc16 <__udivmodsi4>
 bc6:	07 fc       	sbrc	r0, 7
 bc8:	03 d0       	rcall	.+6      	; 0xbd0 <__divmodsi4_neg2>
 bca:	4e f4       	brtc	.+18     	; 0xbde <__divmodsi4_exit>
 bcc:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__negsi2>

00000bd0 <__divmodsi4_neg2>:
 bd0:	50 95       	com	r21
 bd2:	40 95       	com	r20
 bd4:	30 95       	com	r19
 bd6:	21 95       	neg	r18
 bd8:	3f 4f       	sbci	r19, 0xFF	; 255
 bda:	4f 4f       	sbci	r20, 0xFF	; 255
 bdc:	5f 4f       	sbci	r21, 0xFF	; 255

00000bde <__divmodsi4_exit>:
 bde:	08 95       	ret

00000be0 <__negsi2>:
 be0:	90 95       	com	r25
 be2:	80 95       	com	r24
 be4:	70 95       	com	r23
 be6:	61 95       	neg	r22
 be8:	7f 4f       	sbci	r23, 0xFF	; 255
 bea:	8f 4f       	sbci	r24, 0xFF	; 255
 bec:	9f 4f       	sbci	r25, 0xFF	; 255
 bee:	08 95       	ret

00000bf0 <__muluhisi3>:
 bf0:	0e 94 5c 05 	call	0xab8	; 0xab8 <__umulhisi3>
 bf4:	a5 9f       	mul	r26, r21
 bf6:	90 0d       	add	r25, r0
 bf8:	b4 9f       	mul	r27, r20
 bfa:	90 0d       	add	r25, r0
 bfc:	a4 9f       	mul	r26, r20
 bfe:	80 0d       	add	r24, r0
 c00:	91 1d       	adc	r25, r1
 c02:	11 24       	eor	r1, r1
 c04:	08 95       	ret

00000c06 <__mulshisi3>:
 c06:	b7 ff       	sbrs	r27, 7
 c08:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__muluhisi3>

00000c0c <__mulohisi3>:
 c0c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__muluhisi3>
 c10:	82 1b       	sub	r24, r18
 c12:	93 0b       	sbc	r25, r19
 c14:	08 95       	ret

00000c16 <__udivmodsi4>:
 c16:	a1 e2       	ldi	r26, 0x21	; 33
 c18:	1a 2e       	mov	r1, r26
 c1a:	aa 1b       	sub	r26, r26
 c1c:	bb 1b       	sub	r27, r27
 c1e:	fd 01       	movw	r30, r26
 c20:	0d c0       	rjmp	.+26     	; 0xc3c <__udivmodsi4_ep>

00000c22 <__udivmodsi4_loop>:
 c22:	aa 1f       	adc	r26, r26
 c24:	bb 1f       	adc	r27, r27
 c26:	ee 1f       	adc	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	a2 17       	cp	r26, r18
 c2c:	b3 07       	cpc	r27, r19
 c2e:	e4 07       	cpc	r30, r20
 c30:	f5 07       	cpc	r31, r21
 c32:	20 f0       	brcs	.+8      	; 0xc3c <__udivmodsi4_ep>
 c34:	a2 1b       	sub	r26, r18
 c36:	b3 0b       	sbc	r27, r19
 c38:	e4 0b       	sbc	r30, r20
 c3a:	f5 0b       	sbc	r31, r21

00000c3c <__udivmodsi4_ep>:
 c3c:	66 1f       	adc	r22, r22
 c3e:	77 1f       	adc	r23, r23
 c40:	88 1f       	adc	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	1a 94       	dec	r1
 c46:	69 f7       	brne	.-38     	; 0xc22 <__udivmodsi4_loop>
 c48:	60 95       	com	r22
 c4a:	70 95       	com	r23
 c4c:	80 95       	com	r24
 c4e:	90 95       	com	r25
 c50:	9b 01       	movw	r18, r22
 c52:	ac 01       	movw	r20, r24
 c54:	bd 01       	movw	r22, r26
 c56:	cf 01       	movw	r24, r30
 c58:	08 95       	ret

00000c5a <_exit>:
 c5a:	f8 94       	cli

00000c5c <__stop_program>:
 c5c:	ff cf       	rjmp	.-2      	; 0xc5c <__stop_program>
