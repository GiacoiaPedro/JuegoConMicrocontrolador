
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000013f0  00001484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080015c  0080015c  000014e0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c13  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d16  00000000  00000000  0000332f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f8d  00000000  00000000  00004045  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00004fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000729  00000000  00000000  0000537c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001045  00000000  00000000  00005aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006aea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__ctors_end>
       4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      10:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      14:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      18:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      1c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      20:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      24:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      30:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      34:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_14>
      3c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      44:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      4c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      50:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      54:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      58:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      5c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      60:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      64:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	41 72       	andi	r20, 0x21	; 33
      6a:	62 6f       	ori	r22, 0xF2	; 242
      6c:	6c 00       	.word	0x006c	; ????
      6e:	42 6f       	ori	r20, 0xF2	; 242
      70:	74 6f       	ori	r23, 0xF4	; 244
      72:	6e 00       	.word	0x006e	; ????
      74:	43 44       	sbci	r20, 0x43	; 67
      76:	79 4d       	sbci	r23, 0xD9	; 217
      78:	43 00       	.word	0x0043	; ????
      7a:	43 6c       	ori	r20, 0xC3	; 195
      7c:	61 76       	andi	r22, 0x61	; 97
      7e:	45 00       	.word	0x0045	; ????
      80:	46 61       	ori	r20, 0x16	; 22
      82:	63 69       	ori	r22, 0x93	; 147
      84:	6c 00       	.word	0x006c	; ????
      86:	47 61       	ori	r20, 0x17	; 23
      88:	66 61       	ori	r22, 0x16	; 22
      8a:	73 00       	.word	0x0073	; ????
      8c:	48 6f       	ori	r20, 0xF8	; 248
      8e:	6a 61       	ori	r22, 0x1A	; 26
      90:	73 00       	.word	0x0073	; ????
      92:	4c 69       	ori	r20, 0x9C	; 156
      94:	42 72       	andi	r20, 0x22	; 34
      96:	6f 00       	.word	0x006f	; ????
      98:	4c 61       	ori	r20, 0x1C	; 28
      9a:	6e 7a       	andi	r22, 0xAE	; 174
      9c:	61 00       	.word	0x0061	; ????
      9e:	4e 69       	ori	r20, 0x9E	; 158
      a0:	65 76       	andi	r22, 0x65	; 101
      a2:	65 00       	.word	0x0065	; ????
      a4:	50 65       	ori	r21, 0x50	; 80
      a6:	52 72       	andi	r21, 0x22	; 34
      a8:	6f 00       	.word	0x006f	; ????
      aa:	50 65       	ori	r21, 0x50	; 80
      ac:	63 45       	sbci	r22, 0x53	; 83
      ae:	53 00       	.word	0x0053	; ????
      b0:	50 69       	ori	r21, 0x90	; 144
      b2:	41 6e       	ori	r20, 0xE1	; 225
      b4:	6f 00       	.word	0x006f	; ????
      b6:	50 72       	andi	r21, 0x20	; 32
      b8:	59 4b       	sbci	r21, 0xB9	; 185
      ba:	65 00       	.word	0x0065	; ????
      bc:	52 55       	subi	r21, 0x52	; 82
      be:	45 44       	sbci	r20, 0x45	; 69
      c0:	61 00       	.word	0x0061	; ????
      c2:	53 45       	sbci	r21, 0x53	; 83
      c4:	52 49       	sbci	r21, 0x92	; 146
      c6:	45 00       	.word	0x0045	; ????
      c8:	53 61       	ori	r21, 0x13	; 19
      ca:	6c 55       	subi	r22, 0x5C	; 92
      cc:	64 00       	.word	0x0064	; ????
      ce:	53 61       	ori	r21, 0x13	; 19
      d0:	6c 75       	andi	r22, 0x5C	; 92
      d2:	64 00       	.word	0x0064	; ????
      d4:	53 69       	ori	r21, 0x93	; 147
      d6:	6c 6c       	ori	r22, 0xCC	; 204
      d8:	61 00       	.word	0x0061	; ????
      da:	54 65       	ori	r21, 0x54	; 84
      dc:	63 6c       	ori	r22, 0xC3	; 195
      de:	61 00       	.word	0x0061	; ????
      e0:	56 61       	ori	r21, 0x16	; 22
      e2:	6c 6f       	ori	r22, 0xFC	; 252
      e4:	72 00       	.word	0x0072	; ????
      e6:	56 65       	ori	r21, 0x56	; 86
      e8:	72 64       	ori	r23, 0x42	; 66
      ea:	65 00       	.word	0x0065	; ????
      ec:	59 6e       	ori	r21, 0xE9	; 233
      ee:	48 52       	subi	r20, 0x28	; 40
      f0:	7a 00       	.word	0x007a	; ????
      f2:	68 41       	sbci	r22, 0x18	; 24
      f4:	52 64       	ori	r21, 0x42	; 66
      f6:	44 00       	.word	0x0044	; ????
      f8:	73 69       	ori	r23, 0x93	; 147
      fa:	6c 6c       	ori	r22, 0xCC	; 204
      fc:	61 00       	.word	0x0061	; ????

000000fe <LcdCustomChar>:
      fe:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     10e:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     11e:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     12e:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d8 e0       	ldi	r29, 0x08	; 8
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61

0000014a <__do_copy_data>:
     14a:	11 e0       	ldi	r17, 0x01	; 1
     14c:	a0 e0       	ldi	r26, 0x00	; 0
     14e:	b1 e0       	ldi	r27, 0x01	; 1
     150:	e0 ef       	ldi	r30, 0xF0	; 240
     152:	f3 e1       	ldi	r31, 0x13	; 19
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x10>
     156:	05 90       	lpm	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	ac 35       	cpi	r26, 0x5C	; 92
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0xc>

00000160 <__do_clear_bss>:
     160:	21 e0       	ldi	r18, 0x01	; 1
     162:	ac e5       	ldi	r26, 0x5C	; 92
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	a4 37       	cpi	r26, 0x74	; 116
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
     170:	0e 94 2d 06 	call	0xc5a	; 0xc5a <main>
     174:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <_exit>

00000178 <__bad_interrupt>:
     178:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017c <timer_init>:
    /* F_CPU = 16?MHz  
	   Prescaler 64  --> 16Mhz / 64 = 250?kHz -->  4?microsegundos x tick de CLK
        1?ms --> 250 ticks * 4 microsegundos ? OCR0A = 249                             
	*/
	//Timer en modo compare CTC
    TCCR0A = (1<<WGM01);
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	84 bd       	out	0x24, r24	; 36
	//Prescaler en 64            
    TCCR0B = (1<<CS01) | (1<<CS00);
     180:	93 e0       	ldi	r25, 0x03	; 3
     182:	95 bd       	out	0x25, r25	; 37
    OCR0A  = 249;
     184:	99 ef       	ldi	r25, 0xF9	; 249
     186:	97 bd       	out	0x27, r25	; 39
	//Habilita interrupciones por compare match
    TIMSK0 = (1<<OCIE0A);
     188:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	//Habilita interrupciones globales
    sei();
     18c:	78 94       	sei
     18e:	08 95       	ret

00000190 <__vector_14>:
}

/* ---------- ISR única ---------- */
ISR(TIMER0_COMPA_vect)
{
     190:	1f 92       	push	r1
     192:	0f 92       	push	r0
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	0f 92       	push	r0
     198:	11 24       	eor	r1, r1
     19a:	2f 93       	push	r18
     19c:	3f 93       	push	r19
     19e:	4f 93       	push	r20
     1a0:	5f 93       	push	r21
     1a2:	6f 93       	push	r22
     1a4:	7f 93       	push	r23
     1a6:	8f 93       	push	r24
     1a8:	9f 93       	push	r25
     1aa:	af 93       	push	r26
     1ac:	bf 93       	push	r27
     1ae:	ef 93       	push	r30
     1b0:	ff 93       	push	r31
    ++ticksMS; //Paso 1ms, sumo al contador
     1b2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     1b6:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
     1ba:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <__data_end+0x2>
     1be:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <__data_end+0x3>
     1c2:	01 96       	adiw	r24, 0x01	; 1
     1c4:	a1 1d       	adc	r26, r1
     1c6:	b1 1d       	adc	r27, r1
     1c8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
     1cc:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
     1d0:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <__data_end+0x2>
     1d4:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <__data_end+0x3>

    extern void fsm_tick(void);
    clk_tick(); 
     1d8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <clk_tick>
}
     1dc:	ff 91       	pop	r31
     1de:	ef 91       	pop	r30
     1e0:	bf 91       	pop	r27
     1e2:	af 91       	pop	r26
     1e4:	9f 91       	pop	r25
     1e6:	8f 91       	pop	r24
     1e8:	7f 91       	pop	r23
     1ea:	6f 91       	pop	r22
     1ec:	5f 91       	pop	r21
     1ee:	4f 91       	pop	r20
     1f0:	3f 91       	pop	r19
     1f2:	2f 91       	pop	r18
     1f4:	0f 90       	pop	r0
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	0f 90       	pop	r0
     1fa:	1f 90       	pop	r1
     1fc:	18 95       	reti

000001fe <digitsToAscii>:
    for (uint8_t i=0;i<16;i++) LCDsendChar(' ');
    LCDGotoXY(0,line);
}

static uint8_t digitsToAscii(const uint8_t d[], uint8_t count)
{
     1fe:	dc 01       	movw	r26, r24
    uint16_t v = 0;
    for (uint8_t i=0;i<count;i++) v = v*10 + d[i];
     200:	90 e0       	ldi	r25, 0x00	; 0
    LCDGotoXY(0,line);
}

static uint8_t digitsToAscii(const uint8_t d[], uint8_t count)
{
    uint16_t v = 0;
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
    for (uint8_t i=0;i<count;i++) v = v*10 + d[i];
     206:	12 c0       	rjmp	.+36     	; 0x22c <digitsToAscii+0x2e>
     208:	a9 01       	movw	r20, r18
     20a:	44 0f       	add	r20, r20
     20c:	55 1f       	adc	r21, r21
     20e:	22 0f       	add	r18, r18
     210:	33 1f       	adc	r19, r19
     212:	22 0f       	add	r18, r18
     214:	33 1f       	adc	r19, r19
     216:	22 0f       	add	r18, r18
     218:	33 1f       	adc	r19, r19
     21a:	24 0f       	add	r18, r20
     21c:	35 1f       	adc	r19, r21
     21e:	fd 01       	movw	r30, r26
     220:	e9 0f       	add	r30, r25
     222:	f1 1d       	adc	r31, r1
     224:	40 81       	ld	r20, Z
     226:	24 0f       	add	r18, r20
     228:	31 1d       	adc	r19, r1
     22a:	9f 5f       	subi	r25, 0xFF	; 255
     22c:	96 17       	cp	r25, r22
     22e:	60 f3       	brcs	.-40     	; 0x208 <digitsToAscii+0xa>
    return (v <= 127) ? (uint8_t)v : 0;
     230:	20 38       	cpi	r18, 0x80	; 128
     232:	31 05       	cpc	r19, r1
     234:	10 f4       	brcc	.+4      	; 0x23a <digitsToAscii+0x3c>
     236:	82 2f       	mov	r24, r18
     238:	08 95       	ret
     23a:	80 e0       	ldi	r24, 0x00	; 0
}
     23c:	08 95       	ret

0000023e <lcd_line_clear>:
{
    LCDclr();
    LCDGotoXY(0,1);           
}
static void lcd_line_clear(uint8_t line)
{
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	d8 2f       	mov	r29, r24
    LCDGotoXY(0,line);
     244:	68 2f       	mov	r22, r24
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	0e 94 75 05 	call	0xaea	; 0xaea <LCDGotoXY>
    for (uint8_t i=0;i<16;i++) LCDsendChar(' ');
     24c:	c0 e0       	ldi	r28, 0x00	; 0
     24e:	04 c0       	rjmp	.+8      	; 0x258 <lcd_line_clear+0x1a>
     250:	80 e2       	ldi	r24, 0x20	; 32
     252:	0e 94 2d 04 	call	0x85a	; 0x85a <LCDsendChar>
     256:	cf 5f       	subi	r28, 0xFF	; 255
     258:	c0 31       	cpi	r28, 0x10	; 16
     25a:	d0 f3       	brcs	.-12     	; 0x250 <lcd_line_clear+0x12>
    LCDGotoXY(0,line);
     25c:	6d 2f       	mov	r22, r29
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 75 05 	call	0xaea	; 0xaea <LCDGotoXY>
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <lcd_prepare_input>:
    LCDGotoXY(0,0);
    LCDstring((uint8_t *)secretWord, WORD_LEN);
}
static void lcd_prepare_input(void)
{
    LCDclr();
     26a:	0e 94 59 05 	call	0xab2	; 0xab2 <LCDclr>
    LCDGotoXY(0,1);           
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0e 94 75 05 	call	0xaea	; 0xaea <LCDGotoXY>
     276:	08 95       	ret

00000278 <lcd_idle>:


//Metodos auxiliares
static void lcd_idle(void)
{
    LCDclr();
     278:	0e 94 59 05 	call	0xab2	; 0xab2 <LCDclr>
    LCDGotoXY(0,0);
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 75 05 	call	0xaea	; 0xaea <LCDGotoXY>
    LCDstring((uint8_t *)"Presione * para", 15);
     284:	6f e0       	ldi	r22, 0x0F	; 15
     286:	85 e0       	ldi	r24, 0x05	; 5
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	0e 94 5d 05 	call	0xaba	; 0xaba <LCDstring>
    LCDGotoXY(0,1);
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 75 05 	call	0xaea	; 0xaea <LCDGotoXY>
    LCDstring((uint8_t *)"    iniciar...", 14);
     296:	6e e0       	ldi	r22, 0x0E	; 14
     298:	85 e1       	ldi	r24, 0x15	; 21
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	0e 94 5d 05 	call	0xaba	; 0xaba <LCDstring>
     2a0:	08 95       	ret

000002a2 <lcd_show_word>:
}
static void lcd_show_word(void)
{
    LCDclr();
     2a2:	0e 94 59 05 	call	0xab2	; 0xab2 <LCDclr>
    LCDGotoXY(0,0);
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 75 05 	call	0xaea	; 0xaea <LCDGotoXY>
    LCDstring((uint8_t *)secretWord, WORD_LEN);
     2ae:	65 e0       	ldi	r22, 0x05	; 5
     2b0:	8d e6       	ldi	r24, 0x6D	; 109
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	0e 94 5d 05 	call	0xaba	; 0xaba <LCDstring>
     2b8:	08 95       	ret

000002ba <fsm_init>:
    return (v <= 127) ? (uint8_t)v : 0;
}

void fsm_init(void)
{
    state = ST_IDLE;
     2ba:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <state>
    first = 1;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <first>
     2c4:	08 95       	ret

000002c6 <clk_tick>:
}

void clk_tick(void)
{
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	61 97       	sbiw	r28, 0x11	; 17
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
    char key;

    switch (state)
     2de:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <state>
     2e2:	82 30       	cpi	r24, 0x02	; 2
     2e4:	09 f4       	brne	.+2      	; 0x2e8 <clk_tick+0x22>
     2e6:	8f c0       	rjmp	.+286    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     2e8:	28 f4       	brcc	.+10     	; 0x2f4 <clk_tick+0x2e>
     2ea:	88 23       	and	r24, r24
     2ec:	61 f0       	breq	.+24     	; 0x306 <clk_tick+0x40>
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	b9 f1       	breq	.+110    	; 0x360 <clk_tick+0x9a>
     2f2:	ec c1       	rjmp	.+984    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
     2f4:	84 30       	cpi	r24, 0x04	; 4
     2f6:	09 f4       	brne	.+2      	; 0x2fa <clk_tick+0x34>
     2f8:	24 c1       	rjmp	.+584    	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
     2fa:	08 f4       	brcc	.+2      	; 0x2fe <clk_tick+0x38>
     2fc:	d9 c0       	rjmp	.+434    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     2fe:	85 30       	cpi	r24, 0x05	; 5
     300:	09 f4       	brne	.+2      	; 0x304 <clk_tick+0x3e>
     302:	a5 c1       	rjmp	.+842    	; 0x64e <__EEPROM_REGION_LENGTH__+0x24e>
     304:	e3 c1       	rjmp	.+966    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
    {
    case ST_IDLE:
        if (first) {
     306:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <first>
     30a:	88 23       	and	r24, r24
     30c:	51 f0       	breq	.+20     	; 0x322 <clk_tick+0x5c>
            first = 0;
     30e:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <first>
            lcd_idle();
     312:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_idle>
            idx = errorCount = asciiIndex = 0;
     316:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <asciiIndex>
     31a:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <errorCount>
     31e:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <idx>
        }
        if (keypad_scan(&key) && key == '*') {
     322:	ce 01       	movw	r24, r28
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	0e 94 84 03 	call	0x708	; 0x708 <keypad_scan>
     32a:	88 23       	and	r24, r24
     32c:	09 f4       	brne	.+2      	; 0x330 <clk_tick+0x6a>
     32e:	ce c1       	rjmp	.+924    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	8a 32       	cpi	r24, 0x2A	; 42
     334:	09 f0       	breq	.+2      	; 0x338 <clk_tick+0x72>
     336:	ca c1       	rjmp	.+916    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
            dict_seed(ticksMS);
     338:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <__data_end>
     33c:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <__data_end+0x1>
     340:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end+0x2>
     344:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x3>
     348:	0e 94 f6 03 	call	0x7ec	; 0x7ec <dict_seed>
            dict_get_random_word(secretWord);
     34c:	8d e6       	ldi	r24, 0x6D	; 109
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <dict_get_random_word>
            state = ST_SHOW_WORD;
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
            first = 1;
     35a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <first>
     35e:	b6 c1       	rjmp	.+876    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
        }
        break;

/* ----------------- SHOW_WORD (2â¯s) ---------------- */
    case ST_SHOW_WORD:
        if (first) {
     360:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <first>
     364:	88 23       	and	r24, r24
     366:	a1 f0       	breq	.+40     	; 0x390 <clk_tick+0xca>
            first = 0;
     368:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <first>
            lcd_show_word();
     36c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_show_word>
            t_ref = ticksMS;
     370:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     374:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
     378:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <__data_end+0x2>
     37c:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <__data_end+0x3>
     380:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <t_ref>
     384:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <t_ref+0x1>
     388:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <t_ref+0x2>
     38c:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <t_ref+0x3>
        }
        if (ticksMS - t_ref >= TIME_SHOW_WORD) {
     390:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     394:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
     398:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <__data_end+0x2>
     39c:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <__data_end+0x3>
     3a0:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <t_ref>
     3a4:	50 91 64 01 	lds	r21, 0x0164	; 0x800164 <t_ref+0x1>
     3a8:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <t_ref+0x2>
     3ac:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <t_ref+0x3>
     3b0:	84 1b       	sub	r24, r20
     3b2:	95 0b       	sbc	r25, r21
     3b4:	a6 0b       	sbc	r26, r22
     3b6:	b7 0b       	sbc	r27, r23
     3b8:	80 3d       	cpi	r24, 0xD0	; 208
     3ba:	97 40       	sbci	r25, 0x07	; 7
     3bc:	a1 05       	cpc	r26, r1
     3be:	b1 05       	cpc	r27, r1
     3c0:	08 f4       	brcc	.+2      	; 0x3c4 <clk_tick+0xfe>
     3c2:	84 c1       	rjmp	.+776    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
            lcd_prepare_input();
     3c4:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_prepare_input>
            t_ref = ticksMS;     
     3c8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     3cc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
     3d0:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <__data_end+0x2>
     3d4:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <__data_end+0x3>
     3d8:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <t_ref>
     3dc:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <t_ref+0x1>
     3e0:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <t_ref+0x2>
     3e4:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <t_ref+0x3>
            state = ST_TYPING;
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
            lastKeyPressed = '\0';
     3ee:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <lastKeyPressed>
            asciiIndex = 0;
     3f2:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <asciiIndex>
            memset(asciiDigits,0,sizeof(asciiDigits));
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	e8 e6       	ldi	r30, 0x68	; 104
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	df 01       	movw	r26, r30
     3fe:	1d 92       	st	X+, r1
     400:	8a 95       	dec	r24
     402:	e9 f7       	brne	.-6      	; 0x3fe <clk_tick+0x138>
     404:	63 c1       	rjmp	.+710    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
        }
        break;

    case ST_TYPING:
        if (keypad_scan(&key)) {
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	0e 94 84 03 	call	0x708	; 0x708 <keypad_scan>
     40e:	88 23       	and	r24, r24
     410:	09 f4       	brne	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     412:	4b c0       	rjmp	.+150    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
            if (key == lastKeyPressed){ 
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <lastKeyPressed>
     41a:	89 17       	cp	r24, r25
     41c:	09 f4       	brne	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     41e:	56 c1       	rjmp	.+684    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
				break;
			}
            lastKeyPressed = key;
     420:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <lastKeyPressed>

            if (key == '#') {
     424:	83 32       	cpi	r24, 0x23	; 35
     426:	61 f5       	brne	.+88     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
                if (asciiIndex >= 2) {
     428:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <asciiIndex>
     42c:	62 30       	cpi	r22, 0x02	; 2
     42e:	90 f0       	brcs	.+36     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
                    lastCharTyped = (char)digitsToAscii(asciiDigits, asciiIndex);
     430:	88 e6       	ldi	r24, 0x68	; 104
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 ff 00 	call	0x1fe	; 0x1fe <digitsToAscii>
     438:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <lastCharTyped>
                    asciiIndex = 0;
     43c:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <asciiIndex>
                    lcd_line_clear(1);
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_line_clear>
                    state = ST_CHECK;
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
                    first = 1;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <first>
     452:	3c c1       	rjmp	.+632    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
                } else {                            /* <2 dÃ­gitos = error */
                    errorCount++;
     454:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <errorCount>
     458:	8f 5f       	subi	r24, 0xFF	; 255
     45a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <errorCount>
                    asciiIndex = 0;
     45e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <asciiIndex>
                    lcd_line_clear(1);
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_line_clear>
                    if (errorCount >= 3) { state = ST_DEFEAT; first = 1; }
     468:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <errorCount>
     46c:	83 30       	cpi	r24, 0x03	; 3
     46e:	08 f4       	brcc	.+2      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     470:	2d c1       	rjmp	.+602    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
     472:	85 e0       	ldi	r24, 0x05	; 5
     474:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <first>
     47e:	26 c1       	rjmp	.+588    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
                }
                break;
            }

            if (key >= '0' && key <= '9' && asciiIndex < 3) {
     480:	90 ed       	ldi	r25, 0xD0	; 208
     482:	98 0f       	add	r25, r24
     484:	9a 30       	cpi	r25, 0x0A	; 10
     486:	08 f0       	brcs	.+2      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     488:	21 c1       	rjmp	.+578    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
     48a:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <asciiIndex>
     48e:	e3 30       	cpi	r30, 0x03	; 3
     490:	08 f0       	brcs	.+2      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     492:	1c c1       	rjmp	.+568    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
                asciiDigits[asciiIndex++] = key - '0';
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	2e 0f       	add	r18, r30
     498:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <asciiIndex>
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	e8 59       	subi	r30, 0x98	; 152
     4a0:	fe 4f       	sbci	r31, 0xFE	; 254
     4a2:	90 83       	st	Z, r25
                LCDsendChar(key);
     4a4:	0e 94 2d 04 	call	0x85a	; 0x85a <LCDsendChar>
     4a8:	11 c1       	rjmp	.+546    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
            }
        } else {
            lastKeyPressed = '\0';
     4aa:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <lastKeyPressed>
     4ae:	0e c1       	rjmp	.+540    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
        }
        break;

    case ST_CHECK:
        if (first) { 
     4b0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <first>
     4b4:	81 11       	cpse	r24, r1
			first = 0; 
     4b6:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <first>
		}
        bool fallo = false;

        if (!((lastCharTyped>='A'&&lastCharTyped<='Z')||
     4ba:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <lastCharTyped>
     4be:	8f eb       	ldi	r24, 0xBF	; 191
     4c0:	89 0f       	add	r24, r25
     4c2:	8a 31       	cpi	r24, 0x1A	; 26
     4c4:	20 f0       	brcs	.+8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
              (lastCharTyped>='a'&&lastCharTyped<='z')))
     4c6:	8f e9       	ldi	r24, 0x9F	; 159
     4c8:	89 0f       	add	r24, r25
        if (first) { 
			first = 0; 
		}
        bool fallo = false;

        if (!((lastCharTyped>='A'&&lastCharTyped<='Z')||
     4ca:	8a 31       	cpi	r24, 0x1A	; 26
     4cc:	f0 f4       	brcc	.+60     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
              (lastCharTyped>='a'&&lastCharTyped<='z')))
            fallo = true;
        else if (lastCharTyped == secretWord[idx]) {
     4ce:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <idx>
     4d2:	e8 2f       	mov	r30, r24
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	e3 59       	subi	r30, 0x93	; 147
     4d8:	fe 4f       	sbci	r31, 0xFE	; 254
     4da:	20 81       	ld	r18, Z
     4dc:	92 13       	cpse	r25, r18
     4de:	17 c0       	rjmp	.+46     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
            typedWord[idx] = lastCharTyped;
            LCDGotoXY(idx,0);
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	0e 94 75 05 	call	0xaea	; 0xaea <LCDGotoXY>
            LCDsendChar(lastCharTyped);
     4e6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <lastCharTyped>
     4ea:	0e 94 2d 04 	call	0x85a	; 0x85a <LCDsendChar>
            idx++;
     4ee:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <idx>
     4f2:	8f 5f       	subi	r24, 0xFF	; 255
     4f4:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <idx>
            if (idx == WORD_LEN) { state = ST_VICTORY; first = 1; break; }
     4f8:	85 30       	cpi	r24, 0x05	; 5
     4fa:	59 f4       	brne	.+22     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
     4fc:	84 e0       	ldi	r24, 0x04	; 4
     4fe:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <first>
     508:	e1 c0       	rjmp	.+450    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
		}
        bool fallo = false;

        if (!((lastCharTyped>='A'&&lastCharTyped<='Z')||
              (lastCharTyped>='a'&&lastCharTyped<='z')))
            fallo = true;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	03 c0       	rjmp	.+6      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
            LCDGotoXY(idx,0);
            LCDsendChar(lastCharTyped);
            idx++;
            if (idx == WORD_LEN) { state = ST_VICTORY; first = 1; break; }
        } else {
            fallo = true;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	01 c0       	rjmp	.+2      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>

    case ST_CHECK:
        if (first) { 
			first = 0; 
		}
        bool fallo = false;
     512:	80 e0       	ldi	r24, 0x00	; 0
            if (idx == WORD_LEN) { state = ST_VICTORY; first = 1; break; }
        } else {
            fallo = true;
        }

        if (fallo) {
     514:	88 23       	and	r24, r24
     516:	71 f0       	breq	.+28     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
            errorCount++;
     518:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <errorCount>
     51c:	8f 5f       	subi	r24, 0xFF	; 255
     51e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <errorCount>
            if (errorCount >= 3) { state = ST_DEFEAT; first = 1; break; }
     522:	83 30       	cpi	r24, 0x03	; 3
     524:	38 f0       	brcs	.+14     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
     526:	85 e0       	ldi	r24, 0x05	; 5
     528:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <first>
     532:	cc c0       	rjmp	.+408    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
        }

        /* volver a pedir siguiente carÃ¡cter */
        lcd_line_clear(1);
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_line_clear>
        state = ST_TYPING;
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <state>
        break;
     540:	c5 c0       	rjmp	.+394    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>

/* -------------------- VICTORY -------------------- */
    case ST_VICTORY:
        if (first) {
     542:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <first>
     546:	88 23       	and	r24, r24
     548:	e9 f0       	breq	.+58     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
            first = 0;
     54a:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <first>
            LCDclr();
     54e:	0e 94 59 05 	call	0xab2	; 0xab2 <LCDclr>
            LCDGotoXY(0,0);
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	0e 94 75 05 	call	0xaea	; 0xaea <LCDGotoXY>
            LCDstring((uint8_t *)"VICTORIA!", 9);
     55a:	69 e0       	ldi	r22, 0x09	; 9
     55c:	84 e2       	ldi	r24, 0x24	; 36
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 5d 05 	call	0xaba	; 0xaba <LCDstring>
            t_ref = ticksMS;
     564:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     568:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
     56c:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <__data_end+0x2>
     570:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <__data_end+0x3>
     574:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <t_ref>
     578:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <t_ref+0x1>
     57c:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <t_ref+0x2>
     580:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <t_ref+0x3>
        }
        {
            static uint8_t lastSec = 255;
            uint8_t sec = (ticksMS - t_ref)/1000;
     584:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     588:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
     58c:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <__data_end+0x2>
     590:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <__data_end+0x3>
     594:	00 91 63 01 	lds	r16, 0x0163	; 0x800163 <t_ref>
     598:	10 91 64 01 	lds	r17, 0x0164	; 0x800164 <t_ref+0x1>
     59c:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <t_ref+0x2>
     5a0:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <t_ref+0x3>
     5a4:	bc 01       	movw	r22, r24
     5a6:	cd 01       	movw	r24, r26
     5a8:	60 1b       	sub	r22, r16
     5aa:	71 0b       	sbc	r23, r17
     5ac:	82 0b       	sbc	r24, r18
     5ae:	93 0b       	sbc	r25, r19
     5b0:	28 ee       	ldi	r18, 0xE8	; 232
     5b2:	33 e0       	ldi	r19, 0x03	; 3
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	0e 94 36 06 	call	0xc6c	; 0xc6c <__udivmodsi4>
            if (sec != lastSec) {
     5bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lastSec.2222>
     5c0:	82 17       	cp	r24, r18
     5c2:	29 f1       	breq	.+74     	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
                lastSec = sec;
     5c4:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <lastSec.2222>
                char buf[16];
                snprintf(buf,sizeof(buf),"Tiempo: %u s",sec);
     5c8:	1f 92       	push	r1
     5ca:	2f 93       	push	r18
     5cc:	8e e2       	ldi	r24, 0x2E	; 46
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	9f 93       	push	r25
     5d2:	8f 93       	push	r24
     5d4:	1f 92       	push	r1
     5d6:	80 e1       	ldi	r24, 0x10	; 16
     5d8:	8f 93       	push	r24
     5da:	8e 01       	movw	r16, r28
     5dc:	0e 5f       	subi	r16, 0xFE	; 254
     5de:	1f 4f       	sbci	r17, 0xFF	; 255
     5e0:	1f 93       	push	r17
     5e2:	0f 93       	push	r16
     5e4:	0e 94 cc 06 	call	0xd98	; 0xd98 <snprintf>
                lcd_line_clear(1);
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_line_clear>
                LCDstring((uint8_t *)buf, strlen(buf));
     5ee:	f8 01       	movw	r30, r16
     5f0:	01 90       	ld	r0, Z+
     5f2:	00 20       	and	r0, r0
     5f4:	e9 f7       	brne	.-6      	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
     5f6:	31 97       	sbiw	r30, 0x01	; 1
     5f8:	bf 01       	movw	r22, r30
     5fa:	60 1b       	sub	r22, r16
     5fc:	71 0b       	sbc	r23, r17
     5fe:	c8 01       	movw	r24, r16
     600:	0e 94 5d 05 	call	0xaba	; 0xaba <LCDstring>
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
            }
        }
        if (ticksMS - t_ref >= TIME_FINAL) {
     60e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     612:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
     616:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <__data_end+0x2>
     61a:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <__data_end+0x3>
     61e:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <t_ref>
     622:	50 91 64 01 	lds	r21, 0x0164	; 0x800164 <t_ref+0x1>
     626:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <t_ref+0x2>
     62a:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <t_ref+0x3>
     62e:	84 1b       	sub	r24, r20
     630:	95 0b       	sbc	r25, r21
     632:	a6 0b       	sbc	r26, r22
     634:	b7 0b       	sbc	r27, r23
     636:	88 38       	cpi	r24, 0x88	; 136
     638:	93 41       	sbci	r25, 0x13	; 19
     63a:	a1 05       	cpc	r26, r1
     63c:	b1 05       	cpc	r27, r1
     63e:	08 f4       	brcc	.+2      	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
     640:	45 c0       	rjmp	.+138    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
            state = ST_IDLE; first = 1;
     642:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <state>
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <first>
     64c:	3f c0       	rjmp	.+126    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
        }
        break;

/* -------------------- DEFEAT --------------------- */
    case ST_DEFEAT:
        if (first) {
     64e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <first>
     652:	88 23       	and	r24, r24
     654:	e9 f0       	breq	.+58     	; 0x690 <__EEPROM_REGION_LENGTH__+0x290>
            first = 0;
     656:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <first>
            LCDclr();
     65a:	0e 94 59 05 	call	0xab2	; 0xab2 <LCDclr>
            LCDGotoXY(0,0);
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 75 05 	call	0xaea	; 0xaea <LCDGotoXY>
            LCDstring((uint8_t *)"DERROTA!", 8);
     666:	68 e0       	ldi	r22, 0x08	; 8
     668:	8b e3       	ldi	r24, 0x3B	; 59
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 5d 05 	call	0xaba	; 0xaba <LCDstring>
            t_ref = ticksMS;
     670:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     674:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
     678:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <__data_end+0x2>
     67c:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <__data_end+0x3>
     680:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <t_ref>
     684:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <t_ref+0x1>
     688:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <t_ref+0x2>
     68c:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <t_ref+0x3>
        }
        if (ticksMS - t_ref >= TIME_FINAL) {
     690:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     694:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
     698:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <__data_end+0x2>
     69c:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <__data_end+0x3>
     6a0:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <t_ref>
     6a4:	50 91 64 01 	lds	r21, 0x0164	; 0x800164 <t_ref+0x1>
     6a8:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <t_ref+0x2>
     6ac:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <t_ref+0x3>
     6b0:	84 1b       	sub	r24, r20
     6b2:	95 0b       	sbc	r25, r21
     6b4:	a6 0b       	sbc	r26, r22
     6b6:	b7 0b       	sbc	r27, r23
     6b8:	88 38       	cpi	r24, 0x88	; 136
     6ba:	93 41       	sbci	r25, 0x13	; 19
     6bc:	a1 05       	cpc	r26, r1
     6be:	b1 05       	cpc	r27, r1
     6c0:	28 f0       	brcs	.+10     	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
            state = ST_IDLE; first = 1;
     6c2:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <state>
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <first>
        }
        break;
    }
}
     6cc:	61 96       	adiw	r28, 0x11	; 17
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <keypad_init>:
static const uint8_t col_bits[4] = { PD3, PD5, PD4, PD2 };

void keypad_init(void)
{
    /* filas como entrada con pull-up */
    DDRB &= ~(_BV(PB4) | _BV(PB3) | _BV(PB0));
     6e2:	84 b1       	in	r24, 0x04	; 4
     6e4:	86 7e       	andi	r24, 0xE6	; 230
     6e6:	84 b9       	out	0x04, r24	; 4
    PORTB |=  _BV(PB4) | _BV(PB3) | _BV(PB0);
     6e8:	85 b1       	in	r24, 0x05	; 5
     6ea:	89 61       	ori	r24, 0x19	; 25
     6ec:	85 b9       	out	0x05, r24	; 5

    DDRD &= ~_BV(PD7);
     6ee:	8a b1       	in	r24, 0x0a	; 10
     6f0:	8f 77       	andi	r24, 0x7F	; 127
     6f2:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  _BV(PD7);
     6f4:	8b b1       	in	r24, 0x0b	; 11
     6f6:	80 68       	ori	r24, 0x80	; 128
     6f8:	8b b9       	out	0x0b, r24	; 11

    /* columnas en alta Z + pull-up mientras no se escanean */
    DDRD  &= ~(_BV(PD2)|_BV(PD3)|_BV(PD4)|_BV(PD5));
     6fa:	8a b1       	in	r24, 0x0a	; 10
     6fc:	83 7c       	andi	r24, 0xC3	; 195
     6fe:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (_BV(PD2)|_BV(PD3)|_BV(PD4)|_BV(PD5));
     700:	8b b1       	in	r24, 0x0b	; 11
     702:	8c 63       	ori	r24, 0x3C	; 60
     704:	8b b9       	out	0x0b, r24	; 11
     706:	08 95       	ret

00000708 <keypad_scan>:
}

uint8_t keypad_scan(char *key)
{
    /* Recorremos las 4 columnas */
    for (uint8_t c = 0; c < 4; c++)
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	6b c0       	rjmp	.+214    	; 0x7e2 <keypad_scan+0xda>
    {
        //Columna c a LOW (los demás quedan en pull-up)
        DDRD  |=  _BV(col_bits[c]);      //Configurar como salida
     70c:	7a b1       	in	r23, 0x0a	; 10
     70e:	46 2f       	mov	r20, r22
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	fa 01       	movw	r30, r20
     714:	ec 5b       	subi	r30, 0xBC	; 188
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	21 e0       	ldi	r18, 0x01	; 1
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	00 80       	ld	r0, Z
     71e:	02 c0       	rjmp	.+4      	; 0x724 <keypad_scan+0x1c>
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	0a 94       	dec	r0
     726:	e2 f7       	brpl	.-8      	; 0x720 <keypad_scan+0x18>
     728:	37 2f       	mov	r19, r23
     72a:	32 2b       	or	r19, r18
     72c:	3a b9       	out	0x0a, r19	; 10
        PORTD &= ~_BV(col_bits[c]);      
     72e:	3b b1       	in	r19, 0x0b	; 11
     730:	20 95       	com	r18
     732:	23 23       	and	r18, r19
     734:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     736:	20 e1       	ldi	r18, 0x10	; 16
     738:	2a 95       	dec	r18
     73a:	f1 f7       	brne	.-4      	; 0x738 <keypad_scan+0x30>
        _delay_us(3);                    

        /* 2. Recorremos las 4 filas */
        for (uint8_t r = 0; r < 4; r++)
     73c:	e0 e0       	ldi	r30, 0x00	; 0
     73e:	3b c0       	rjmp	.+118    	; 0x7b6 <keypad_scan+0xae>
        {
            uint8_t pressed;

            if (r == 3)  /* FILA3 = PD7 */
     740:	e3 30       	cpi	r30, 0x03	; 3
     742:	31 f4       	brne	.+12     	; 0x750 <keypad_scan+0x48>
                pressed = !(PIND & _BV(PD7));
     744:	29 b1       	in	r18, 0x09	; 9
     746:	20 95       	com	r18
     748:	22 1f       	adc	r18, r18
     74a:	22 27       	eor	r18, r18
     74c:	22 1f       	adc	r18, r18
     74e:	0f c0       	rjmp	.+30     	; 0x76e <keypad_scan+0x66>
            else         /* FILA0-2  en PORTB */
                pressed = !(PINB & _BV(row_bits[r]));
     750:	23 b1       	in	r18, 0x03	; 3
     752:	ae 2f       	mov	r26, r30
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	a8 5b       	subi	r26, 0xB8	; 184
     758:	be 4f       	sbci	r27, 0xFE	; 254
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	0c 90       	ld	r0, X
     75e:	02 c0       	rjmp	.+4      	; 0x764 <keypad_scan+0x5c>
     760:	35 95       	asr	r19
     762:	27 95       	ror	r18
     764:	0a 94       	dec	r0
     766:	e2 f7       	brpl	.-8      	; 0x760 <keypad_scan+0x58>
     768:	71 e0       	ldi	r23, 0x01	; 1
     76a:	27 27       	eor	r18, r23
     76c:	21 70       	andi	r18, 0x01	; 1

            if (pressed)
     76e:	22 23       	and	r18, r18
     770:	09 f1       	breq	.+66     	; 0x7b4 <keypad_scan+0xac>
            {
                *key = keymap[r][c];
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	ee 0f       	add	r30, r30
     77a:	ff 1f       	adc	r31, r31
     77c:	e4 5b       	subi	r30, 0xB4	; 180
     77e:	fe 4f       	sbci	r31, 0xFE	; 254
     780:	e4 0f       	add	r30, r20
     782:	f5 1f       	adc	r31, r21
     784:	20 81       	ld	r18, Z
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18

                /* liberar la columna antes de salir */
                PORTD |=  _BV(col_bits[c]);   /* pull-up otra vez */
     78a:	2b b1       	in	r18, 0x0b	; 11
     78c:	fa 01       	movw	r30, r20
     78e:	ec 5b       	subi	r30, 0xBC	; 188
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	00 80       	ld	r0, Z
     798:	02 c0       	rjmp	.+4      	; 0x79e <keypad_scan+0x96>
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	0a 94       	dec	r0
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <keypad_scan+0x92>
     7a2:	92 2f       	mov	r25, r18
     7a4:	98 2b       	or	r25, r24
     7a6:	9b b9       	out	0x0b, r25	; 11
                DDRD  &= ~_BV(col_bits[c]);   /* alta Z           */
     7a8:	9a b1       	in	r25, 0x0a	; 10
     7aa:	80 95       	com	r24
     7ac:	89 23       	and	r24, r25
     7ae:	8a b9       	out	0x0a, r24	; 10
                return 1;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	08 95       	ret
        DDRD  |=  _BV(col_bits[c]);      //Configurar como salida
        PORTD &= ~_BV(col_bits[c]);      
        _delay_us(3);                    

        /* 2. Recorremos las 4 filas */
        for (uint8_t r = 0; r < 4; r++)
     7b4:	ef 5f       	subi	r30, 0xFF	; 255
     7b6:	e4 30       	cpi	r30, 0x04	; 4
     7b8:	18 f2       	brcs	.-122    	; 0x740 <keypad_scan+0x38>
                return 1;
            }
        }

        /* 3. Ninguna tecla en esta columna ? la liberamos */
        PORTD |=  _BV(col_bits[c]);
     7ba:	7b b1       	in	r23, 0x0b	; 11
     7bc:	fa 01       	movw	r30, r20
     7be:	ec 5b       	subi	r30, 0xBC	; 188
     7c0:	fe 4f       	sbci	r31, 0xFE	; 254
     7c2:	21 e0       	ldi	r18, 0x01	; 1
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	00 80       	ld	r0, Z
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <keypad_scan+0xc6>
     7ca:	22 0f       	add	r18, r18
     7cc:	33 1f       	adc	r19, r19
     7ce:	0a 94       	dec	r0
     7d0:	e2 f7       	brpl	.-8      	; 0x7ca <keypad_scan+0xc2>
     7d2:	37 2f       	mov	r19, r23
     7d4:	32 2b       	or	r19, r18
     7d6:	3b b9       	out	0x0b, r19	; 11
        DDRD  &= ~_BV(col_bits[c]);
     7d8:	3a b1       	in	r19, 0x0a	; 10
     7da:	20 95       	com	r18
     7dc:	23 23       	and	r18, r19
     7de:	2a b9       	out	0x0a, r18	; 10
}

uint8_t keypad_scan(char *key)
{
    /* Recorremos las 4 columnas */
    for (uint8_t c = 0; c < 4; c++)
     7e0:	6f 5f       	subi	r22, 0xFF	; 255
     7e2:	64 30       	cpi	r22, 0x04	; 4
     7e4:	08 f4       	brcc	.+2      	; 0x7e8 <keypad_scan+0xe0>
     7e6:	92 cf       	rjmp	.-220    	; 0x70c <keypad_scan+0x4>

        /* 3. Ninguna tecla en esta columna ? la liberamos */
        PORTD |=  _BV(col_bits[c]);
        DDRD  &= ~_BV(col_bits[c]);
    }
    return 0;   
     7e8:	80 e0       	ldi	r24, 0x00	; 0
}
     7ea:	08 95       	ret

000007ec <dict_seed>:

//Toma como "semilla" el valor actual de 16-bit del clock al momento que se llama el metodo 
//para la randomizacion de la palabra
void dict_seed(uint32_t s)
{
	srand((unsigned)s);
     7ec:	cb 01       	movw	r24, r22
     7ee:	0e 94 b8 06 	call	0xd70	; 0xd70 <srand>
     7f2:	08 95       	ret

000007f4 <dict_get_random_word>:
}

void dict_get_random_word(char *wrd)
{
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	ec 01       	movw	r28, r24
	uint8_t idx = (uint8_t)(rand() % DICT_SIZE);   
     7fa:	0e 94 b3 06 	call	0xd66	; 0xd66 <rand>
     7fe:	ac 01       	movw	r20, r24
     800:	9c 01       	movw	r18, r24
     802:	af ea       	ldi	r26, 0xAF	; 175
     804:	b7 e4       	ldi	r27, 0x47	; 71
     806:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__umulhisi3>
     80a:	28 1b       	sub	r18, r24
     80c:	39 0b       	sbc	r19, r25
     80e:	36 95       	lsr	r19
     810:	27 95       	ror	r18
     812:	82 0f       	add	r24, r18
     814:	93 1f       	adc	r25, r19
     816:	92 95       	swap	r25
     818:	82 95       	swap	r24
     81a:	8f 70       	andi	r24, 0x0F	; 15
     81c:	89 27       	eor	r24, r25
     81e:	9f 70       	andi	r25, 0x0F	; 15
     820:	89 27       	eor	r24, r25
     822:	69 e1       	ldi	r22, 0x19	; 25
     824:	68 9f       	mul	r22, r24
     826:	90 01       	movw	r18, r0
     828:	69 9f       	mul	r22, r25
     82a:	30 0d       	add	r19, r0
     82c:	11 24       	eor	r1, r1
     82e:	ca 01       	movw	r24, r20
     830:	82 1b       	sub	r24, r18
     832:	93 0b       	sbc	r25, r19
	memcpy_P(wrd, dict[idx], WORD_BUF);            
     834:	99 27       	eor	r25, r25
     836:	bc 01       	movw	r22, r24
     838:	66 0f       	add	r22, r22
     83a:	77 1f       	adc	r23, r23
     83c:	86 0f       	add	r24, r22
     83e:	97 1f       	adc	r25, r23
     840:	bc 01       	movw	r22, r24
     842:	66 0f       	add	r22, r22
     844:	77 1f       	adc	r23, r23
     846:	68 59       	subi	r22, 0x98	; 152
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	46 e0       	ldi	r20, 0x06	; 6
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	ce 01       	movw	r24, r28
     850:	0e 94 c3 06 	call	0xd86	; 0xd86 <memcpy_P>
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     85a:	65 b1       	in	r22, 0x05	; 5
     85c:	98 2f       	mov	r25, r24
     85e:	90 74       	andi	r25, 0x40	; 64
     860:	49 2f       	mov	r20, r25
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	55 95       	asr	r21
     866:	47 95       	ror	r20
     868:	55 95       	asr	r21
     86a:	47 95       	ror	r20
     86c:	55 95       	asr	r21
     86e:	47 95       	ror	r20
     870:	55 95       	asr	r21
     872:	47 95       	ror	r20
     874:	98 2f       	mov	r25, r24
     876:	90 78       	andi	r25, 0x80	; 128
     878:	29 2f       	mov	r18, r25
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	02 2e       	mov	r0, r18
     87e:	23 2f       	mov	r18, r19
     880:	00 0c       	add	r0, r0
     882:	22 1f       	adc	r18, r18
     884:	33 0b       	sbc	r19, r19
     886:	00 0c       	add	r0, r0
     888:	22 1f       	adc	r18, r18
     88a:	33 1f       	adc	r19, r19
     88c:	96 2f       	mov	r25, r22
     88e:	99 7f       	andi	r25, 0xF9	; 249
     890:	49 2b       	or	r20, r25
     892:	24 2b       	or	r18, r20
     894:	25 b9       	out	0x05, r18	; 5
     896:	68 b1       	in	r22, 0x08	; 8
     898:	98 2f       	mov	r25, r24
     89a:	90 71       	andi	r25, 0x10	; 16
     89c:	49 2f       	mov	r20, r25
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	55 95       	asr	r21
     8a2:	47 95       	ror	r20
     8a4:	55 95       	asr	r21
     8a6:	47 95       	ror	r20
     8a8:	55 95       	asr	r21
     8aa:	47 95       	ror	r20
     8ac:	98 2f       	mov	r25, r24
     8ae:	90 72       	andi	r25, 0x20	; 32
     8b0:	29 2f       	mov	r18, r25
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	35 95       	asr	r19
     8b6:	27 95       	ror	r18
     8b8:	35 95       	asr	r19
     8ba:	27 95       	ror	r18
     8bc:	35 95       	asr	r19
     8be:	27 95       	ror	r18
     8c0:	96 2f       	mov	r25, r22
     8c2:	99 7f       	andi	r25, 0xF9	; 249
     8c4:	49 2b       	or	r20, r25
     8c6:	24 2b       	or	r18, r20
     8c8:	28 b9       	out	0x08, r18	; 8
     8ca:	9b b1       	in	r25, 0x0b	; 11
     8cc:	92 60       	ori	r25, 0x02	; 2
     8ce:	9b b9       	out	0x0b, r25	; 11
     8d0:	9b b1       	in	r25, 0x0b	; 11
     8d2:	91 60       	ori	r25, 0x01	; 1
     8d4:	9b b9       	out	0x0b, r25	; 11
     8d6:	25 ed       	ldi	r18, 0xD5	; 213
     8d8:	2a 95       	dec	r18
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <LCDsendChar+0x7e>
     8dc:	00 00       	nop
     8de:	9b b1       	in	r25, 0x0b	; 11
     8e0:	9e 7f       	andi	r25, 0xFE	; 254
     8e2:	9b b9       	out	0x0b, r25	; 11
     8e4:	9b b1       	in	r25, 0x0b	; 11
     8e6:	9d 7f       	andi	r25, 0xFD	; 253
     8e8:	9b b9       	out	0x0b, r25	; 11
     8ea:	95 ed       	ldi	r25, 0xD5	; 213
     8ec:	9a 95       	dec	r25
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <LCDsendChar+0x92>
     8f0:	00 00       	nop
     8f2:	65 b1       	in	r22, 0x05	; 5
     8f4:	20 e1       	ldi	r18, 0x10	; 16
     8f6:	82 9f       	mul	r24, r18
     8f8:	c0 01       	movw	r24, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	ac 01       	movw	r20, r24
     8fe:	40 74       	andi	r20, 0x40	; 64
     900:	55 27       	eor	r21, r21
     902:	55 95       	asr	r21
     904:	47 95       	ror	r20
     906:	55 95       	asr	r21
     908:	47 95       	ror	r20
     90a:	55 95       	asr	r21
     90c:	47 95       	ror	r20
     90e:	55 95       	asr	r21
     910:	47 95       	ror	r20
     912:	9c 01       	movw	r18, r24
     914:	20 78       	andi	r18, 0x80	; 128
     916:	33 27       	eor	r19, r19
     918:	02 2e       	mov	r0, r18
     91a:	23 2f       	mov	r18, r19
     91c:	00 0c       	add	r0, r0
     91e:	22 1f       	adc	r18, r18
     920:	33 0b       	sbc	r19, r19
     922:	00 0c       	add	r0, r0
     924:	22 1f       	adc	r18, r18
     926:	33 1f       	adc	r19, r19
     928:	36 2f       	mov	r19, r22
     92a:	39 7f       	andi	r19, 0xF9	; 249
     92c:	43 2b       	or	r20, r19
     92e:	24 2b       	or	r18, r20
     930:	25 b9       	out	0x05, r18	; 5
     932:	48 b1       	in	r20, 0x08	; 8
     934:	9c 01       	movw	r18, r24
     936:	20 71       	andi	r18, 0x10	; 16
     938:	33 27       	eor	r19, r19
     93a:	35 95       	asr	r19
     93c:	27 95       	ror	r18
     93e:	35 95       	asr	r19
     940:	27 95       	ror	r18
     942:	35 95       	asr	r19
     944:	27 95       	ror	r18
     946:	80 72       	andi	r24, 0x20	; 32
     948:	99 27       	eor	r25, r25
     94a:	95 95       	asr	r25
     94c:	87 95       	ror	r24
     94e:	95 95       	asr	r25
     950:	87 95       	ror	r24
     952:	95 95       	asr	r25
     954:	87 95       	ror	r24
     956:	94 2f       	mov	r25, r20
     958:	99 7f       	andi	r25, 0xF9	; 249
     95a:	29 2b       	or	r18, r25
     95c:	82 2b       	or	r24, r18
     95e:	88 b9       	out	0x08, r24	; 8
     960:	8b b1       	in	r24, 0x0b	; 11
     962:	82 60       	ori	r24, 0x02	; 2
     964:	8b b9       	out	0x0b, r24	; 11
     966:	8b b1       	in	r24, 0x0b	; 11
     968:	81 60       	ori	r24, 0x01	; 1
     96a:	8b b9       	out	0x0b, r24	; 11
     96c:	85 ed       	ldi	r24, 0xD5	; 213
     96e:	8a 95       	dec	r24
     970:	f1 f7       	brne	.-4      	; 0x96e <__stack+0x6f>
     972:	00 00       	nop
     974:	8b b1       	in	r24, 0x0b	; 11
     976:	8e 7f       	andi	r24, 0xFE	; 254
     978:	8b b9       	out	0x0b, r24	; 11
     97a:	8b b1       	in	r24, 0x0b	; 11
     97c:	8d 7f       	andi	r24, 0xFD	; 253
     97e:	8b b9       	out	0x0b, r24	; 11
     980:	95 ed       	ldi	r25, 0xD5	; 213
     982:	9a 95       	dec	r25
     984:	f1 f7       	brne	.-4      	; 0x982 <__stack+0x83>
     986:	00 00       	nop
     988:	08 95       	ret

0000098a <LCDsendCommand>:
     98a:	65 b1       	in	r22, 0x05	; 5
     98c:	98 2f       	mov	r25, r24
     98e:	90 74       	andi	r25, 0x40	; 64
     990:	49 2f       	mov	r20, r25
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	55 95       	asr	r21
     996:	47 95       	ror	r20
     998:	55 95       	asr	r21
     99a:	47 95       	ror	r20
     99c:	55 95       	asr	r21
     99e:	47 95       	ror	r20
     9a0:	55 95       	asr	r21
     9a2:	47 95       	ror	r20
     9a4:	98 2f       	mov	r25, r24
     9a6:	90 78       	andi	r25, 0x80	; 128
     9a8:	29 2f       	mov	r18, r25
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	02 2e       	mov	r0, r18
     9ae:	23 2f       	mov	r18, r19
     9b0:	00 0c       	add	r0, r0
     9b2:	22 1f       	adc	r18, r18
     9b4:	33 0b       	sbc	r19, r19
     9b6:	00 0c       	add	r0, r0
     9b8:	22 1f       	adc	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	96 2f       	mov	r25, r22
     9be:	99 7f       	andi	r25, 0xF9	; 249
     9c0:	49 2b       	or	r20, r25
     9c2:	24 2b       	or	r18, r20
     9c4:	25 b9       	out	0x05, r18	; 5
     9c6:	68 b1       	in	r22, 0x08	; 8
     9c8:	98 2f       	mov	r25, r24
     9ca:	90 71       	andi	r25, 0x10	; 16
     9cc:	49 2f       	mov	r20, r25
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	55 95       	asr	r21
     9d2:	47 95       	ror	r20
     9d4:	55 95       	asr	r21
     9d6:	47 95       	ror	r20
     9d8:	55 95       	asr	r21
     9da:	47 95       	ror	r20
     9dc:	98 2f       	mov	r25, r24
     9de:	90 72       	andi	r25, 0x20	; 32
     9e0:	29 2f       	mov	r18, r25
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	35 95       	asr	r19
     9e6:	27 95       	ror	r18
     9e8:	35 95       	asr	r19
     9ea:	27 95       	ror	r18
     9ec:	35 95       	asr	r19
     9ee:	27 95       	ror	r18
     9f0:	96 2f       	mov	r25, r22
     9f2:	99 7f       	andi	r25, 0xF9	; 249
     9f4:	49 2b       	or	r20, r25
     9f6:	24 2b       	or	r18, r20
     9f8:	28 b9       	out	0x08, r18	; 8
     9fa:	9b b1       	in	r25, 0x0b	; 11
     9fc:	91 60       	ori	r25, 0x01	; 1
     9fe:	9b b9       	out	0x0b, r25	; 11
     a00:	ef e9       	ldi	r30, 0x9F	; 159
     a02:	ff e0       	ldi	r31, 0x0F	; 15
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <LCDsendCommand+0x7a>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <LCDsendCommand+0x80>
     a0a:	00 00       	nop
     a0c:	9b b1       	in	r25, 0x0b	; 11
     a0e:	9e 7f       	andi	r25, 0xFE	; 254
     a10:	9b b9       	out	0x0b, r25	; 11
     a12:	ef e9       	ldi	r30, 0x9F	; 159
     a14:	ff e0       	ldi	r31, 0x0F	; 15
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	f1 f7       	brne	.-4      	; 0xa16 <LCDsendCommand+0x8c>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <LCDsendCommand+0x92>
     a1c:	00 00       	nop
     a1e:	65 b1       	in	r22, 0x05	; 5
     a20:	f0 e1       	ldi	r31, 0x10	; 16
     a22:	8f 9f       	mul	r24, r31
     a24:	c0 01       	movw	r24, r0
     a26:	11 24       	eor	r1, r1
     a28:	ac 01       	movw	r20, r24
     a2a:	40 74       	andi	r20, 0x40	; 64
     a2c:	55 27       	eor	r21, r21
     a2e:	55 95       	asr	r21
     a30:	47 95       	ror	r20
     a32:	55 95       	asr	r21
     a34:	47 95       	ror	r20
     a36:	55 95       	asr	r21
     a38:	47 95       	ror	r20
     a3a:	55 95       	asr	r21
     a3c:	47 95       	ror	r20
     a3e:	9c 01       	movw	r18, r24
     a40:	20 78       	andi	r18, 0x80	; 128
     a42:	33 27       	eor	r19, r19
     a44:	02 2e       	mov	r0, r18
     a46:	23 2f       	mov	r18, r19
     a48:	00 0c       	add	r0, r0
     a4a:	22 1f       	adc	r18, r18
     a4c:	33 0b       	sbc	r19, r19
     a4e:	00 0c       	add	r0, r0
     a50:	22 1f       	adc	r18, r18
     a52:	33 1f       	adc	r19, r19
     a54:	36 2f       	mov	r19, r22
     a56:	39 7f       	andi	r19, 0xF9	; 249
     a58:	43 2b       	or	r20, r19
     a5a:	24 2b       	or	r18, r20
     a5c:	25 b9       	out	0x05, r18	; 5
     a5e:	48 b1       	in	r20, 0x08	; 8
     a60:	9c 01       	movw	r18, r24
     a62:	20 71       	andi	r18, 0x10	; 16
     a64:	33 27       	eor	r19, r19
     a66:	35 95       	asr	r19
     a68:	27 95       	ror	r18
     a6a:	35 95       	asr	r19
     a6c:	27 95       	ror	r18
     a6e:	35 95       	asr	r19
     a70:	27 95       	ror	r18
     a72:	80 72       	andi	r24, 0x20	; 32
     a74:	99 27       	eor	r25, r25
     a76:	95 95       	asr	r25
     a78:	87 95       	ror	r24
     a7a:	95 95       	asr	r25
     a7c:	87 95       	ror	r24
     a7e:	95 95       	asr	r25
     a80:	87 95       	ror	r24
     a82:	94 2f       	mov	r25, r20
     a84:	99 7f       	andi	r25, 0xF9	; 249
     a86:	29 2b       	or	r18, r25
     a88:	82 2b       	or	r24, r18
     a8a:	88 b9       	out	0x08, r24	; 8
     a8c:	8b b1       	in	r24, 0x0b	; 11
     a8e:	81 60       	ori	r24, 0x01	; 1
     a90:	8b b9       	out	0x0b, r24	; 11
     a92:	8f e9       	ldi	r24, 0x9F	; 159
     a94:	9f e0       	ldi	r25, 0x0F	; 15
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <LCDsendCommand+0x10c>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <LCDsendCommand+0x112>
     a9c:	00 00       	nop
     a9e:	8b b1       	in	r24, 0x0b	; 11
     aa0:	8e 7f       	andi	r24, 0xFE	; 254
     aa2:	8b b9       	out	0x0b, r24	; 11
     aa4:	ef e9       	ldi	r30, 0x9F	; 159
     aa6:	ff e0       	ldi	r31, 0x0F	; 15
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <LCDsendCommand+0x11e>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <LCDsendCommand+0x124>
     aae:	00 00       	nop
     ab0:	08 95       	ret

00000ab2 <LCDclr>:
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	0e 94 c5 04 	call	0x98a	; 0x98a <LCDsendCommand>
     ab8:	08 95       	ret

00000aba <LCDstring>:
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	00 97       	sbiw	r24, 0x00	; 0
     ac4:	69 f0       	breq	.+26     	; 0xae0 <LCDstring+0x26>
     ac6:	d6 2f       	mov	r29, r22
     ac8:	8c 01       	movw	r16, r24
     aca:	c0 e0       	ldi	r28, 0x00	; 0
     acc:	07 c0       	rjmp	.+14     	; 0xadc <LCDstring+0x22>
     ace:	f8 01       	movw	r30, r16
     ad0:	ec 0f       	add	r30, r28
     ad2:	f1 1d       	adc	r31, r1
     ad4:	80 81       	ld	r24, Z
     ad6:	0e 94 2d 04 	call	0x85a	; 0x85a <LCDsendChar>
     ada:	cf 5f       	subi	r28, 0xFF	; 255
     adc:	cd 17       	cp	r28, r29
     ade:	b8 f3       	brcs	.-18     	; 0xace <LCDstring+0x14>
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	08 95       	ret

00000aea <LCDGotoXY>:
     aea:	62 30       	cpi	r22, 0x02	; 2
     aec:	31 f0       	breq	.+12     	; 0xafa <LCDGotoXY+0x10>
     aee:	63 30       	cpi	r22, 0x03	; 3
     af0:	31 f0       	breq	.+12     	; 0xafe <LCDGotoXY+0x14>
     af2:	61 30       	cpi	r22, 0x01	; 1
     af4:	29 f4       	brne	.+10     	; 0xb00 <LCDGotoXY+0x16>
     af6:	80 5c       	subi	r24, 0xC0	; 192
     af8:	03 c0       	rjmp	.+6      	; 0xb00 <LCDGotoXY+0x16>
     afa:	8c 5e       	subi	r24, 0xEC	; 236
     afc:	01 c0       	rjmp	.+2      	; 0xb00 <LCDGotoXY+0x16>
     afe:	8c 5a       	subi	r24, 0xAC	; 172
     b00:	80 68       	ori	r24, 0x80	; 128
     b02:	0e 94 c5 04 	call	0x98a	; 0x98a <LCDsendCommand>
     b06:	08 95       	ret

00000b08 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     b16:	86 2f       	mov	r24, r22
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
     b28:	c0 e0       	ldi	r28, 0x00	; 0
     b2a:	d0 e0       	ldi	r29, 0x00	; 0
     b2c:	0d c0       	rjmp	.+26     	; 0xb48 <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
     b2e:	f7 01       	movw	r30, r14
     b30:	ec 0f       	add	r30, r28
     b32:	fd 1f       	adc	r31, r29
     b34:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
     b36:	01 e0       	ldi	r16, 0x01	; 1
     b38:	08 0f       	add	r16, r24
     b3a:	0e 94 c5 04 	call	0x98a	; 0x98a <LCDsendCommand>
		LCDsendChar(pcc);
     b3e:	81 2f       	mov	r24, r17
     b40:	0e 94 2d 04 	call	0x85a	; 0x85a <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     b44:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
     b46:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     b48:	c8 30       	cpi	r28, 0x08	; 8
     b4a:	d1 05       	cpc	r29, r1
     b4c:	80 f3       	brcs	.-32     	; 0xb2e <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	08 95       	ret

00000b5c <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b60:	8f e5       	ldi	r24, 0x5F	; 95
     b62:	9a ee       	ldi	r25, 0xEA	; 234
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <LCDinit+0x8>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <LCDinit+0xe>
     b6a:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	//LDP=0x00;
	LCD_DATAWR(0x00);	
     b6c:	85 b1       	in	r24, 0x05	; 5
     b6e:	89 7f       	andi	r24, 0xF9	; 249
     b70:	85 b9       	out	0x05, r24	; 5
     b72:	88 b1       	in	r24, 0x08	; 8
     b74:	89 7f       	andi	r24, 0xF9	; 249
     b76:	88 b9       	out	0x08, r24	; 8
	LCP=0x00;
     b78:	1b b8       	out	0x0b, r1	; 11
	DDRC|=0x06;
     b7a:	87 b1       	in	r24, 0x07	; 7
     b7c:	86 60       	ori	r24, 0x06	; 6
     b7e:	87 b9       	out	0x07, r24	; 7
	DDRB|=0x06;
     b80:	84 b1       	in	r24, 0x04	; 4
     b82:	86 60       	ori	r24, 0x06	; 6
     b84:	84 b9       	out	0x04, r24	; 4
	LDDR1|=1<<LCD_D7|1<<LCD_D6;
     b86:	84 b1       	in	r24, 0x04	; 4
     b88:	86 60       	ori	r24, 0x06	; 6
     b8a:	84 b9       	out	0x04, r24	; 4
	LDDR2|=1<<LCD_D4|1<<LCD_D5;
     b8c:	87 b1       	in	r24, 0x07	; 7
     b8e:	86 60       	ori	r24, 0x06	; 6
     b90:	87 b9       	out	0x07, r24	; 7
	//LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     b92:	8a b1       	in	r24, 0x0a	; 10
     b94:	83 60       	ori	r24, 0x03	; 3
     b96:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00110000);	
     b98:	85 b1       	in	r24, 0x05	; 5
     b9a:	89 7f       	andi	r24, 0xF9	; 249
     b9c:	85 b9       	out	0x05, r24	; 5
     b9e:	88 b1       	in	r24, 0x08	; 8
     ba0:	86 60       	ori	r24, 0x06	; 6
     ba2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ba4:	8b b1       	in	r24, 0x0b	; 11
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	8b b9       	out	0x0b, r24	; 11
     baa:	8f e9       	ldi	r24, 0x9F	; 159
     bac:	9f e0       	ldi	r25, 0x0F	; 15
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <LCDinit+0x52>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <LCDinit+0x58>
     bb4:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     bb6:	8b b1       	in	r24, 0x0b	; 11
     bb8:	8e 7f       	andi	r24, 0xFE	; 254
     bba:	8b b9       	out	0x0b, r24	; 11
     bbc:	8f e9       	ldi	r24, 0x9F	; 159
     bbe:	9f e0       	ldi	r25, 0x0F	; 15
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <LCDinit+0x64>
     bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <LCDinit+0x6a>
     bc6:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00110000);	
     bc8:	85 b1       	in	r24, 0x05	; 5
     bca:	89 7f       	andi	r24, 0xF9	; 249
     bcc:	85 b9       	out	0x05, r24	; 5
     bce:	88 b1       	in	r24, 0x08	; 8
     bd0:	86 60       	ori	r24, 0x06	; 6
     bd2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     bd4:	8b b1       	in	r24, 0x0b	; 11
     bd6:	81 60       	ori	r24, 0x01	; 1
     bd8:	8b b9       	out	0x0b, r24	; 11
     bda:	8f e9       	ldi	r24, 0x9F	; 159
     bdc:	9f e0       	ldi	r25, 0x0F	; 15
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <LCDinit+0x82>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <LCDinit+0x88>
     be4:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     be6:	8b b1       	in	r24, 0x0b	; 11
     be8:	8e 7f       	andi	r24, 0xFE	; 254
     bea:	8b b9       	out	0x0b, r24	; 11
     bec:	8f e9       	ldi	r24, 0x9F	; 159
     bee:	9f e0       	ldi	r25, 0x0F	; 15
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <LCDinit+0x94>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <LCDinit+0x9a>
     bf6:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00100000);	
     bf8:	85 b1       	in	r24, 0x05	; 5
     bfa:	89 7f       	andi	r24, 0xF9	; 249
     bfc:	85 b9       	out	0x05, r24	; 5
     bfe:	88 b1       	in	r24, 0x08	; 8
     c00:	89 7f       	andi	r24, 0xF9	; 249
     c02:	84 60       	ori	r24, 0x04	; 4
     c04:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     c06:	8b b1       	in	r24, 0x0b	; 11
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	8b b9       	out	0x0b, r24	; 11
     c0c:	8f e9       	ldi	r24, 0x9F	; 159
     c0e:	9f e0       	ldi	r25, 0x0F	; 15
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <LCDinit+0xb4>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <LCDinit+0xba>
     c16:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     c18:	8b b1       	in	r24, 0x0b	; 11
     c1a:	8e 7f       	andi	r24, 0xFE	; 254
     c1c:	8b b9       	out	0x0b, r24	; 11
     c1e:	8f e9       	ldi	r24, 0x9F	; 159
     c20:	9f e0       	ldi	r25, 0x0F	; 15
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <LCDinit+0xc6>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <LCDinit+0xcc>
     c28:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     c2a:	88 e2       	ldi	r24, 0x28	; 40
     c2c:	0e 94 c5 04 	call	0x98a	; 0x98a <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     c30:	8c e0       	ldi	r24, 0x0C	; 12
     c32:	0e 94 c5 04 	call	0x98a	; 0x98a <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
     c3a:	0a c0       	rjmp	.+20     	; 0xc50 <LCDinit+0xf4>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     c3c:	d1 e0       	ldi	r29, 0x01	; 1
     c3e:	d6 0f       	add	r29, r22
     c40:	8c 2f       	mov	r24, r28
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	82 50       	subi	r24, 0x02	; 2
     c46:	9f 4f       	sbci	r25, 0xFF	; 255
     c48:	0e 94 84 05 	call	0xb08	; 0xb08 <LCDdefinechar>
		ch=ch+8;
     c4c:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     c4e:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     c50:	c0 34       	cpi	r28, 0x40	; 64
     c52:	a0 f3       	brcs	.-24     	; 0xc3c <LCDinit+0xe0>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <main>:



int main(void)
{	
	keypad_init();
     c5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <keypad_init>
	LCDinit();
     c5e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <LCDinit>
	timer_init();
     c62:	0e 94 be 00 	call	0x17c	; 0x17c <timer_init>
	fsm_init();	
     c66:	0e 94 5d 01 	call	0x2ba	; 0x2ba <fsm_init>
     c6a:	ff cf       	rjmp	.-2      	; 0xc6a <main+0x10>

00000c6c <__udivmodsi4>:
     c6c:	a1 e2       	ldi	r26, 0x21	; 33
     c6e:	1a 2e       	mov	r1, r26
     c70:	aa 1b       	sub	r26, r26
     c72:	bb 1b       	sub	r27, r27
     c74:	fd 01       	movw	r30, r26
     c76:	0d c0       	rjmp	.+26     	; 0xc92 <__udivmodsi4_ep>

00000c78 <__udivmodsi4_loop>:
     c78:	aa 1f       	adc	r26, r26
     c7a:	bb 1f       	adc	r27, r27
     c7c:	ee 1f       	adc	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	a2 17       	cp	r26, r18
     c82:	b3 07       	cpc	r27, r19
     c84:	e4 07       	cpc	r30, r20
     c86:	f5 07       	cpc	r31, r21
     c88:	20 f0       	brcs	.+8      	; 0xc92 <__udivmodsi4_ep>
     c8a:	a2 1b       	sub	r26, r18
     c8c:	b3 0b       	sbc	r27, r19
     c8e:	e4 0b       	sbc	r30, r20
     c90:	f5 0b       	sbc	r31, r21

00000c92 <__udivmodsi4_ep>:
     c92:	66 1f       	adc	r22, r22
     c94:	77 1f       	adc	r23, r23
     c96:	88 1f       	adc	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	1a 94       	dec	r1
     c9c:	69 f7       	brne	.-38     	; 0xc78 <__udivmodsi4_loop>
     c9e:	60 95       	com	r22
     ca0:	70 95       	com	r23
     ca2:	80 95       	com	r24
     ca4:	90 95       	com	r25
     ca6:	9b 01       	movw	r18, r22
     ca8:	ac 01       	movw	r20, r24
     caa:	bd 01       	movw	r22, r26
     cac:	cf 01       	movw	r24, r30
     cae:	08 95       	ret

00000cb0 <__umulhisi3>:
     cb0:	a2 9f       	mul	r26, r18
     cb2:	b0 01       	movw	r22, r0
     cb4:	b3 9f       	mul	r27, r19
     cb6:	c0 01       	movw	r24, r0
     cb8:	a3 9f       	mul	r26, r19
     cba:	70 0d       	add	r23, r0
     cbc:	81 1d       	adc	r24, r1
     cbe:	11 24       	eor	r1, r1
     cc0:	91 1d       	adc	r25, r1
     cc2:	b2 9f       	mul	r27, r18
     cc4:	70 0d       	add	r23, r0
     cc6:	81 1d       	adc	r24, r1
     cc8:	11 24       	eor	r1, r1
     cca:	91 1d       	adc	r25, r1
     ccc:	08 95       	ret

00000cce <do_rand>:
     cce:	8f 92       	push	r8
     cd0:	9f 92       	push	r9
     cd2:	af 92       	push	r10
     cd4:	bf 92       	push	r11
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	ec 01       	movw	r28, r24
     ce4:	68 81       	ld	r22, Y
     ce6:	79 81       	ldd	r23, Y+1	; 0x01
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	9b 81       	ldd	r25, Y+3	; 0x03
     cec:	61 15       	cp	r22, r1
     cee:	71 05       	cpc	r23, r1
     cf0:	81 05       	cpc	r24, r1
     cf2:	91 05       	cpc	r25, r1
     cf4:	21 f4       	brne	.+8      	; 0xcfe <do_rand+0x30>
     cf6:	64 e2       	ldi	r22, 0x24	; 36
     cf8:	79 ed       	ldi	r23, 0xD9	; 217
     cfa:	8b e5       	ldi	r24, 0x5B	; 91
     cfc:	97 e0       	ldi	r25, 0x07	; 7
     cfe:	2d e1       	ldi	r18, 0x1D	; 29
     d00:	33 ef       	ldi	r19, 0xF3	; 243
     d02:	41 e0       	ldi	r20, 0x01	; 1
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	0e 94 8d 09 	call	0x131a	; 0x131a <__divmodsi4>
     d0a:	49 01       	movw	r8, r18
     d0c:	5a 01       	movw	r10, r20
     d0e:	9b 01       	movw	r18, r22
     d10:	ac 01       	movw	r20, r24
     d12:	a7 ea       	ldi	r26, 0xA7	; 167
     d14:	b1 e4       	ldi	r27, 0x41	; 65
     d16:	0e 94 ac 09 	call	0x1358	; 0x1358 <__muluhisi3>
     d1a:	6b 01       	movw	r12, r22
     d1c:	7c 01       	movw	r14, r24
     d1e:	ac ee       	ldi	r26, 0xEC	; 236
     d20:	b4 ef       	ldi	r27, 0xF4	; 244
     d22:	a5 01       	movw	r20, r10
     d24:	94 01       	movw	r18, r8
     d26:	0e 94 ba 09 	call	0x1374	; 0x1374 <__mulohisi3>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	8c 0d       	add	r24, r12
     d30:	9d 1d       	adc	r25, r13
     d32:	ae 1d       	adc	r26, r14
     d34:	bf 1d       	adc	r27, r15
     d36:	b7 ff       	sbrs	r27, 7
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <do_rand+0x72>
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	a1 09       	sbc	r26, r1
     d3e:	b0 48       	sbci	r27, 0x80	; 128
     d40:	88 83       	st	Y, r24
     d42:	99 83       	std	Y+1, r25	; 0x01
     d44:	aa 83       	std	Y+2, r26	; 0x02
     d46:	bb 83       	std	Y+3, r27	; 0x03
     d48:	9f 77       	andi	r25, 0x7F	; 127
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	df 90       	pop	r13
     d54:	cf 90       	pop	r12
     d56:	bf 90       	pop	r11
     d58:	af 90       	pop	r10
     d5a:	9f 90       	pop	r9
     d5c:	8f 90       	pop	r8
     d5e:	08 95       	ret

00000d60 <rand_r>:
     d60:	0e 94 67 06 	call	0xcce	; 0xcce <do_rand>
     d64:	08 95       	ret

00000d66 <rand>:
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 67 06 	call	0xcce	; 0xcce <do_rand>
     d6e:	08 95       	ret

00000d70 <srand>:
     d70:	a0 e0       	ldi	r26, 0x00	; 0
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     d78:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d7c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     d80:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     d84:	08 95       	ret

00000d86 <memcpy_P>:
     d86:	fb 01       	movw	r30, r22
     d88:	dc 01       	movw	r26, r24
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <memcpy_P+0xa>
     d8c:	05 90       	lpm	r0, Z+
     d8e:	0d 92       	st	X+, r0
     d90:	41 50       	subi	r20, 0x01	; 1
     d92:	50 40       	sbci	r21, 0x00	; 0
     d94:	d8 f7       	brcc	.-10     	; 0xd8c <memcpy_P+0x6>
     d96:	08 95       	ret

00000d98 <snprintf>:
     d98:	ae e0       	ldi	r26, 0x0E	; 14
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e2 ed       	ldi	r30, 0xD2	; 210
     d9e:	f6 e0       	ldi	r31, 0x06	; 6
     da0:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__prologue_saves__+0x1c>
     da4:	0d 89       	ldd	r16, Y+21	; 0x15
     da6:	1e 89       	ldd	r17, Y+22	; 0x16
     da8:	8f 89       	ldd	r24, Y+23	; 0x17
     daa:	98 8d       	ldd	r25, Y+24	; 0x18
     dac:	26 e0       	ldi	r18, 0x06	; 6
     dae:	2c 83       	std	Y+4, r18	; 0x04
     db0:	1a 83       	std	Y+2, r17	; 0x02
     db2:	09 83       	std	Y+1, r16	; 0x01
     db4:	97 ff       	sbrs	r25, 7
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <snprintf+0x24>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e8       	ldi	r25, 0x80	; 128
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	9e 83       	std	Y+6, r25	; 0x06
     dc0:	8d 83       	std	Y+5, r24	; 0x05
     dc2:	ae 01       	movw	r20, r28
     dc4:	45 5e       	subi	r20, 0xE5	; 229
     dc6:	5f 4f       	sbci	r21, 0xFF	; 255
     dc8:	69 8d       	ldd	r22, Y+25	; 0x19
     dca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dcc:	ce 01       	movw	r24, r28
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <vfprintf>
     dd4:	4d 81       	ldd	r20, Y+5	; 0x05
     dd6:	5e 81       	ldd	r21, Y+6	; 0x06
     dd8:	57 fd       	sbrc	r21, 7
     dda:	0a c0       	rjmp	.+20     	; 0xdf0 <snprintf+0x58>
     ddc:	2f 81       	ldd	r18, Y+7	; 0x07
     dde:	38 85       	ldd	r19, Y+8	; 0x08
     de0:	42 17       	cp	r20, r18
     de2:	53 07       	cpc	r21, r19
     de4:	0c f4       	brge	.+2      	; 0xde8 <snprintf+0x50>
     de6:	9a 01       	movw	r18, r20
     de8:	f8 01       	movw	r30, r16
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	10 82       	st	Z, r1
     df0:	2e 96       	adiw	r28, 0x0e	; 14
     df2:	e4 e0       	ldi	r30, 0x04	; 4
     df4:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__epilogue_restores__+0x1c>

00000df8 <vfprintf>:
     df8:	ab e0       	ldi	r26, 0x0B	; 11
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e2 e0       	ldi	r30, 0x02	; 2
     dfe:	f7 e0       	ldi	r31, 0x07	; 7
     e00:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__prologue_saves__>
     e04:	6c 01       	movw	r12, r24
     e06:	7b 01       	movw	r14, r22
     e08:	8a 01       	movw	r16, r20
     e0a:	fc 01       	movw	r30, r24
     e0c:	17 82       	std	Z+7, r1	; 0x07
     e0e:	16 82       	std	Z+6, r1	; 0x06
     e10:	83 81       	ldd	r24, Z+3	; 0x03
     e12:	81 ff       	sbrs	r24, 1
     e14:	cc c1       	rjmp	.+920    	; 0x11ae <vfprintf+0x3b6>
     e16:	ce 01       	movw	r24, r28
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	3c 01       	movw	r6, r24
     e1c:	f6 01       	movw	r30, r12
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	f7 01       	movw	r30, r14
     e22:	93 fd       	sbrc	r25, 3
     e24:	85 91       	lpm	r24, Z+
     e26:	93 ff       	sbrs	r25, 3
     e28:	81 91       	ld	r24, Z+
     e2a:	7f 01       	movw	r14, r30
     e2c:	88 23       	and	r24, r24
     e2e:	09 f4       	brne	.+2      	; 0xe32 <vfprintf+0x3a>
     e30:	ba c1       	rjmp	.+884    	; 0x11a6 <vfprintf+0x3ae>
     e32:	85 32       	cpi	r24, 0x25	; 37
     e34:	39 f4       	brne	.+14     	; 0xe44 <vfprintf+0x4c>
     e36:	93 fd       	sbrc	r25, 3
     e38:	85 91       	lpm	r24, Z+
     e3a:	93 ff       	sbrs	r25, 3
     e3c:	81 91       	ld	r24, Z+
     e3e:	7f 01       	movw	r14, r30
     e40:	85 32       	cpi	r24, 0x25	; 37
     e42:	29 f4       	brne	.+10     	; 0xe4e <vfprintf+0x56>
     e44:	b6 01       	movw	r22, r12
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <fputc>
     e4c:	e7 cf       	rjmp	.-50     	; 0xe1c <vfprintf+0x24>
     e4e:	91 2c       	mov	r9, r1
     e50:	21 2c       	mov	r2, r1
     e52:	31 2c       	mov	r3, r1
     e54:	ff e1       	ldi	r31, 0x1F	; 31
     e56:	f3 15       	cp	r31, r3
     e58:	d8 f0       	brcs	.+54     	; 0xe90 <vfprintf+0x98>
     e5a:	8b 32       	cpi	r24, 0x2B	; 43
     e5c:	79 f0       	breq	.+30     	; 0xe7c <vfprintf+0x84>
     e5e:	38 f4       	brcc	.+14     	; 0xe6e <vfprintf+0x76>
     e60:	80 32       	cpi	r24, 0x20	; 32
     e62:	79 f0       	breq	.+30     	; 0xe82 <vfprintf+0x8a>
     e64:	83 32       	cpi	r24, 0x23	; 35
     e66:	a1 f4       	brne	.+40     	; 0xe90 <vfprintf+0x98>
     e68:	23 2d       	mov	r18, r3
     e6a:	20 61       	ori	r18, 0x10	; 16
     e6c:	1d c0       	rjmp	.+58     	; 0xea8 <vfprintf+0xb0>
     e6e:	8d 32       	cpi	r24, 0x2D	; 45
     e70:	61 f0       	breq	.+24     	; 0xe8a <vfprintf+0x92>
     e72:	80 33       	cpi	r24, 0x30	; 48
     e74:	69 f4       	brne	.+26     	; 0xe90 <vfprintf+0x98>
     e76:	23 2d       	mov	r18, r3
     e78:	21 60       	ori	r18, 0x01	; 1
     e7a:	16 c0       	rjmp	.+44     	; 0xea8 <vfprintf+0xb0>
     e7c:	83 2d       	mov	r24, r3
     e7e:	82 60       	ori	r24, 0x02	; 2
     e80:	38 2e       	mov	r3, r24
     e82:	e3 2d       	mov	r30, r3
     e84:	e4 60       	ori	r30, 0x04	; 4
     e86:	3e 2e       	mov	r3, r30
     e88:	2a c0       	rjmp	.+84     	; 0xede <vfprintf+0xe6>
     e8a:	f3 2d       	mov	r31, r3
     e8c:	f8 60       	ori	r31, 0x08	; 8
     e8e:	1d c0       	rjmp	.+58     	; 0xeca <vfprintf+0xd2>
     e90:	37 fc       	sbrc	r3, 7
     e92:	2d c0       	rjmp	.+90     	; 0xeee <vfprintf+0xf6>
     e94:	20 ed       	ldi	r18, 0xD0	; 208
     e96:	28 0f       	add	r18, r24
     e98:	2a 30       	cpi	r18, 0x0A	; 10
     e9a:	40 f0       	brcs	.+16     	; 0xeac <vfprintf+0xb4>
     e9c:	8e 32       	cpi	r24, 0x2E	; 46
     e9e:	b9 f4       	brne	.+46     	; 0xece <vfprintf+0xd6>
     ea0:	36 fc       	sbrc	r3, 6
     ea2:	81 c1       	rjmp	.+770    	; 0x11a6 <vfprintf+0x3ae>
     ea4:	23 2d       	mov	r18, r3
     ea6:	20 64       	ori	r18, 0x40	; 64
     ea8:	32 2e       	mov	r3, r18
     eaa:	19 c0       	rjmp	.+50     	; 0xede <vfprintf+0xe6>
     eac:	36 fe       	sbrs	r3, 6
     eae:	06 c0       	rjmp	.+12     	; 0xebc <vfprintf+0xc4>
     eb0:	8a e0       	ldi	r24, 0x0A	; 10
     eb2:	98 9e       	mul	r9, r24
     eb4:	20 0d       	add	r18, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	92 2e       	mov	r9, r18
     eba:	11 c0       	rjmp	.+34     	; 0xede <vfprintf+0xe6>
     ebc:	ea e0       	ldi	r30, 0x0A	; 10
     ebe:	2e 9e       	mul	r2, r30
     ec0:	20 0d       	add	r18, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	22 2e       	mov	r2, r18
     ec6:	f3 2d       	mov	r31, r3
     ec8:	f0 62       	ori	r31, 0x20	; 32
     eca:	3f 2e       	mov	r3, r31
     ecc:	08 c0       	rjmp	.+16     	; 0xede <vfprintf+0xe6>
     ece:	8c 36       	cpi	r24, 0x6C	; 108
     ed0:	21 f4       	brne	.+8      	; 0xeda <vfprintf+0xe2>
     ed2:	83 2d       	mov	r24, r3
     ed4:	80 68       	ori	r24, 0x80	; 128
     ed6:	38 2e       	mov	r3, r24
     ed8:	02 c0       	rjmp	.+4      	; 0xede <vfprintf+0xe6>
     eda:	88 36       	cpi	r24, 0x68	; 104
     edc:	41 f4       	brne	.+16     	; 0xeee <vfprintf+0xf6>
     ede:	f7 01       	movw	r30, r14
     ee0:	93 fd       	sbrc	r25, 3
     ee2:	85 91       	lpm	r24, Z+
     ee4:	93 ff       	sbrs	r25, 3
     ee6:	81 91       	ld	r24, Z+
     ee8:	7f 01       	movw	r14, r30
     eea:	81 11       	cpse	r24, r1
     eec:	b3 cf       	rjmp	.-154    	; 0xe54 <vfprintf+0x5c>
     eee:	98 2f       	mov	r25, r24
     ef0:	9f 7d       	andi	r25, 0xDF	; 223
     ef2:	95 54       	subi	r25, 0x45	; 69
     ef4:	93 30       	cpi	r25, 0x03	; 3
     ef6:	28 f4       	brcc	.+10     	; 0xf02 <vfprintf+0x10a>
     ef8:	0c 5f       	subi	r16, 0xFC	; 252
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	9f e3       	ldi	r25, 0x3F	; 63
     efe:	99 83       	std	Y+1, r25	; 0x01
     f00:	0d c0       	rjmp	.+26     	; 0xf1c <vfprintf+0x124>
     f02:	83 36       	cpi	r24, 0x63	; 99
     f04:	31 f0       	breq	.+12     	; 0xf12 <vfprintf+0x11a>
     f06:	83 37       	cpi	r24, 0x73	; 115
     f08:	71 f0       	breq	.+28     	; 0xf26 <vfprintf+0x12e>
     f0a:	83 35       	cpi	r24, 0x53	; 83
     f0c:	09 f0       	breq	.+2      	; 0xf10 <vfprintf+0x118>
     f0e:	59 c0       	rjmp	.+178    	; 0xfc2 <vfprintf+0x1ca>
     f10:	21 c0       	rjmp	.+66     	; 0xf54 <vfprintf+0x15c>
     f12:	f8 01       	movw	r30, r16
     f14:	80 81       	ld	r24, Z
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	0e 5f       	subi	r16, 0xFE	; 254
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	88 24       	eor	r8, r8
     f1e:	83 94       	inc	r8
     f20:	91 2c       	mov	r9, r1
     f22:	53 01       	movw	r10, r6
     f24:	13 c0       	rjmp	.+38     	; 0xf4c <vfprintf+0x154>
     f26:	28 01       	movw	r4, r16
     f28:	f2 e0       	ldi	r31, 0x02	; 2
     f2a:	4f 0e       	add	r4, r31
     f2c:	51 1c       	adc	r5, r1
     f2e:	f8 01       	movw	r30, r16
     f30:	a0 80       	ld	r10, Z
     f32:	b1 80       	ldd	r11, Z+1	; 0x01
     f34:	36 fe       	sbrs	r3, 6
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <vfprintf+0x146>
     f38:	69 2d       	mov	r22, r9
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <vfprintf+0x14a>
     f3e:	6f ef       	ldi	r22, 0xFF	; 255
     f40:	7f ef       	ldi	r23, 0xFF	; 255
     f42:	c5 01       	movw	r24, r10
     f44:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <strnlen>
     f48:	4c 01       	movw	r8, r24
     f4a:	82 01       	movw	r16, r4
     f4c:	f3 2d       	mov	r31, r3
     f4e:	ff 77       	andi	r31, 0x7F	; 127
     f50:	3f 2e       	mov	r3, r31
     f52:	16 c0       	rjmp	.+44     	; 0xf80 <vfprintf+0x188>
     f54:	28 01       	movw	r4, r16
     f56:	22 e0       	ldi	r18, 0x02	; 2
     f58:	42 0e       	add	r4, r18
     f5a:	51 1c       	adc	r5, r1
     f5c:	f8 01       	movw	r30, r16
     f5e:	a0 80       	ld	r10, Z
     f60:	b1 80       	ldd	r11, Z+1	; 0x01
     f62:	36 fe       	sbrs	r3, 6
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <vfprintf+0x174>
     f66:	69 2d       	mov	r22, r9
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <vfprintf+0x178>
     f6c:	6f ef       	ldi	r22, 0xFF	; 255
     f6e:	7f ef       	ldi	r23, 0xFF	; 255
     f70:	c5 01       	movw	r24, r10
     f72:	0e 94 dd 08 	call	0x11ba	; 0x11ba <strnlen_P>
     f76:	4c 01       	movw	r8, r24
     f78:	f3 2d       	mov	r31, r3
     f7a:	f0 68       	ori	r31, 0x80	; 128
     f7c:	3f 2e       	mov	r3, r31
     f7e:	82 01       	movw	r16, r4
     f80:	33 fc       	sbrc	r3, 3
     f82:	1b c0       	rjmp	.+54     	; 0xfba <vfprintf+0x1c2>
     f84:	82 2d       	mov	r24, r2
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	88 16       	cp	r8, r24
     f8a:	99 06       	cpc	r9, r25
     f8c:	b0 f4       	brcc	.+44     	; 0xfba <vfprintf+0x1c2>
     f8e:	b6 01       	movw	r22, r12
     f90:	80 e2       	ldi	r24, 0x20	; 32
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <fputc>
     f98:	2a 94       	dec	r2
     f9a:	f4 cf       	rjmp	.-24     	; 0xf84 <vfprintf+0x18c>
     f9c:	f5 01       	movw	r30, r10
     f9e:	37 fc       	sbrc	r3, 7
     fa0:	85 91       	lpm	r24, Z+
     fa2:	37 fe       	sbrs	r3, 7
     fa4:	81 91       	ld	r24, Z+
     fa6:	5f 01       	movw	r10, r30
     fa8:	b6 01       	movw	r22, r12
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <fputc>
     fb0:	21 10       	cpse	r2, r1
     fb2:	2a 94       	dec	r2
     fb4:	21 e0       	ldi	r18, 0x01	; 1
     fb6:	82 1a       	sub	r8, r18
     fb8:	91 08       	sbc	r9, r1
     fba:	81 14       	cp	r8, r1
     fbc:	91 04       	cpc	r9, r1
     fbe:	71 f7       	brne	.-36     	; 0xf9c <vfprintf+0x1a4>
     fc0:	e8 c0       	rjmp	.+464    	; 0x1192 <vfprintf+0x39a>
     fc2:	84 36       	cpi	r24, 0x64	; 100
     fc4:	11 f0       	breq	.+4      	; 0xfca <vfprintf+0x1d2>
     fc6:	89 36       	cpi	r24, 0x69	; 105
     fc8:	41 f5       	brne	.+80     	; 0x101a <vfprintf+0x222>
     fca:	f8 01       	movw	r30, r16
     fcc:	37 fe       	sbrs	r3, 7
     fce:	07 c0       	rjmp	.+14     	; 0xfde <vfprintf+0x1e6>
     fd0:	60 81       	ld	r22, Z
     fd2:	71 81       	ldd	r23, Z+1	; 0x01
     fd4:	82 81       	ldd	r24, Z+2	; 0x02
     fd6:	93 81       	ldd	r25, Z+3	; 0x03
     fd8:	0c 5f       	subi	r16, 0xFC	; 252
     fda:	1f 4f       	sbci	r17, 0xFF	; 255
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <vfprintf+0x1f6>
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	07 2e       	mov	r0, r23
     fe4:	00 0c       	add	r0, r0
     fe6:	88 0b       	sbc	r24, r24
     fe8:	99 0b       	sbc	r25, r25
     fea:	0e 5f       	subi	r16, 0xFE	; 254
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	f3 2d       	mov	r31, r3
     ff0:	ff 76       	andi	r31, 0x6F	; 111
     ff2:	3f 2e       	mov	r3, r31
     ff4:	97 ff       	sbrs	r25, 7
     ff6:	09 c0       	rjmp	.+18     	; 0x100a <vfprintf+0x212>
     ff8:	90 95       	com	r25
     ffa:	80 95       	com	r24
     ffc:	70 95       	com	r23
     ffe:	61 95       	neg	r22
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	f0 68       	ori	r31, 0x80	; 128
    1008:	3f 2e       	mov	r3, r31
    100a:	2a e0       	ldi	r18, 0x0A	; 10
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	a3 01       	movw	r20, r6
    1010:	0e 94 2f 09 	call	0x125e	; 0x125e <__ultoa_invert>
    1014:	88 2e       	mov	r8, r24
    1016:	86 18       	sub	r8, r6
    1018:	45 c0       	rjmp	.+138    	; 0x10a4 <vfprintf+0x2ac>
    101a:	85 37       	cpi	r24, 0x75	; 117
    101c:	31 f4       	brne	.+12     	; 0x102a <vfprintf+0x232>
    101e:	23 2d       	mov	r18, r3
    1020:	2f 7e       	andi	r18, 0xEF	; 239
    1022:	b2 2e       	mov	r11, r18
    1024:	2a e0       	ldi	r18, 0x0A	; 10
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	25 c0       	rjmp	.+74     	; 0x1074 <vfprintf+0x27c>
    102a:	93 2d       	mov	r25, r3
    102c:	99 7f       	andi	r25, 0xF9	; 249
    102e:	b9 2e       	mov	r11, r25
    1030:	8f 36       	cpi	r24, 0x6F	; 111
    1032:	c1 f0       	breq	.+48     	; 0x1064 <vfprintf+0x26c>
    1034:	18 f4       	brcc	.+6      	; 0x103c <vfprintf+0x244>
    1036:	88 35       	cpi	r24, 0x58	; 88
    1038:	79 f0       	breq	.+30     	; 0x1058 <vfprintf+0x260>
    103a:	b5 c0       	rjmp	.+362    	; 0x11a6 <vfprintf+0x3ae>
    103c:	80 37       	cpi	r24, 0x70	; 112
    103e:	19 f0       	breq	.+6      	; 0x1046 <vfprintf+0x24e>
    1040:	88 37       	cpi	r24, 0x78	; 120
    1042:	21 f0       	breq	.+8      	; 0x104c <vfprintf+0x254>
    1044:	b0 c0       	rjmp	.+352    	; 0x11a6 <vfprintf+0x3ae>
    1046:	e9 2f       	mov	r30, r25
    1048:	e0 61       	ori	r30, 0x10	; 16
    104a:	be 2e       	mov	r11, r30
    104c:	b4 fe       	sbrs	r11, 4
    104e:	0d c0       	rjmp	.+26     	; 0x106a <vfprintf+0x272>
    1050:	fb 2d       	mov	r31, r11
    1052:	f4 60       	ori	r31, 0x04	; 4
    1054:	bf 2e       	mov	r11, r31
    1056:	09 c0       	rjmp	.+18     	; 0x106a <vfprintf+0x272>
    1058:	34 fe       	sbrs	r3, 4
    105a:	0a c0       	rjmp	.+20     	; 0x1070 <vfprintf+0x278>
    105c:	29 2f       	mov	r18, r25
    105e:	26 60       	ori	r18, 0x06	; 6
    1060:	b2 2e       	mov	r11, r18
    1062:	06 c0       	rjmp	.+12     	; 0x1070 <vfprintf+0x278>
    1064:	28 e0       	ldi	r18, 0x08	; 8
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <vfprintf+0x27c>
    106a:	20 e1       	ldi	r18, 0x10	; 16
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <vfprintf+0x27c>
    1070:	20 e1       	ldi	r18, 0x10	; 16
    1072:	32 e0       	ldi	r19, 0x02	; 2
    1074:	f8 01       	movw	r30, r16
    1076:	b7 fe       	sbrs	r11, 7
    1078:	07 c0       	rjmp	.+14     	; 0x1088 <vfprintf+0x290>
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	0c 5f       	subi	r16, 0xFC	; 252
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	06 c0       	rjmp	.+12     	; 0x1094 <vfprintf+0x29c>
    1088:	60 81       	ld	r22, Z
    108a:	71 81       	ldd	r23, Z+1	; 0x01
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 5f       	subi	r16, 0xFE	; 254
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	a3 01       	movw	r20, r6
    1096:	0e 94 2f 09 	call	0x125e	; 0x125e <__ultoa_invert>
    109a:	88 2e       	mov	r8, r24
    109c:	86 18       	sub	r8, r6
    109e:	fb 2d       	mov	r31, r11
    10a0:	ff 77       	andi	r31, 0x7F	; 127
    10a2:	3f 2e       	mov	r3, r31
    10a4:	36 fe       	sbrs	r3, 6
    10a6:	0d c0       	rjmp	.+26     	; 0x10c2 <vfprintf+0x2ca>
    10a8:	23 2d       	mov	r18, r3
    10aa:	2e 7f       	andi	r18, 0xFE	; 254
    10ac:	a2 2e       	mov	r10, r18
    10ae:	89 14       	cp	r8, r9
    10b0:	58 f4       	brcc	.+22     	; 0x10c8 <vfprintf+0x2d0>
    10b2:	34 fe       	sbrs	r3, 4
    10b4:	0b c0       	rjmp	.+22     	; 0x10cc <vfprintf+0x2d4>
    10b6:	32 fc       	sbrc	r3, 2
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <vfprintf+0x2d4>
    10ba:	83 2d       	mov	r24, r3
    10bc:	8e 7e       	andi	r24, 0xEE	; 238
    10be:	a8 2e       	mov	r10, r24
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <vfprintf+0x2d4>
    10c2:	b8 2c       	mov	r11, r8
    10c4:	a3 2c       	mov	r10, r3
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <vfprintf+0x2d6>
    10c8:	b8 2c       	mov	r11, r8
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <vfprintf+0x2d6>
    10cc:	b9 2c       	mov	r11, r9
    10ce:	a4 fe       	sbrs	r10, 4
    10d0:	0f c0       	rjmp	.+30     	; 0x10f0 <vfprintf+0x2f8>
    10d2:	fe 01       	movw	r30, r28
    10d4:	e8 0d       	add	r30, r8
    10d6:	f1 1d       	adc	r31, r1
    10d8:	80 81       	ld	r24, Z
    10da:	80 33       	cpi	r24, 0x30	; 48
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <vfprintf+0x2ee>
    10de:	9a 2d       	mov	r25, r10
    10e0:	99 7e       	andi	r25, 0xE9	; 233
    10e2:	a9 2e       	mov	r10, r25
    10e4:	09 c0       	rjmp	.+18     	; 0x10f8 <vfprintf+0x300>
    10e6:	a2 fe       	sbrs	r10, 2
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <vfprintf+0x2fe>
    10ea:	b3 94       	inc	r11
    10ec:	b3 94       	inc	r11
    10ee:	04 c0       	rjmp	.+8      	; 0x10f8 <vfprintf+0x300>
    10f0:	8a 2d       	mov	r24, r10
    10f2:	86 78       	andi	r24, 0x86	; 134
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <vfprintf+0x300>
    10f6:	b3 94       	inc	r11
    10f8:	a3 fc       	sbrc	r10, 3
    10fa:	11 c0       	rjmp	.+34     	; 0x111e <vfprintf+0x326>
    10fc:	a0 fe       	sbrs	r10, 0
    10fe:	06 c0       	rjmp	.+12     	; 0x110c <vfprintf+0x314>
    1100:	b2 14       	cp	r11, r2
    1102:	88 f4       	brcc	.+34     	; 0x1126 <vfprintf+0x32e>
    1104:	28 0c       	add	r2, r8
    1106:	92 2c       	mov	r9, r2
    1108:	9b 18       	sub	r9, r11
    110a:	0e c0       	rjmp	.+28     	; 0x1128 <vfprintf+0x330>
    110c:	b2 14       	cp	r11, r2
    110e:	60 f4       	brcc	.+24     	; 0x1128 <vfprintf+0x330>
    1110:	b6 01       	movw	r22, r12
    1112:	80 e2       	ldi	r24, 0x20	; 32
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <fputc>
    111a:	b3 94       	inc	r11
    111c:	f7 cf       	rjmp	.-18     	; 0x110c <vfprintf+0x314>
    111e:	b2 14       	cp	r11, r2
    1120:	18 f4       	brcc	.+6      	; 0x1128 <vfprintf+0x330>
    1122:	2b 18       	sub	r2, r11
    1124:	02 c0       	rjmp	.+4      	; 0x112a <vfprintf+0x332>
    1126:	98 2c       	mov	r9, r8
    1128:	21 2c       	mov	r2, r1
    112a:	a4 fe       	sbrs	r10, 4
    112c:	10 c0       	rjmp	.+32     	; 0x114e <vfprintf+0x356>
    112e:	b6 01       	movw	r22, r12
    1130:	80 e3       	ldi	r24, 0x30	; 48
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <fputc>
    1138:	a2 fe       	sbrs	r10, 2
    113a:	17 c0       	rjmp	.+46     	; 0x116a <vfprintf+0x372>
    113c:	a1 fc       	sbrc	r10, 1
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <vfprintf+0x34e>
    1140:	88 e7       	ldi	r24, 0x78	; 120
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 c0       	rjmp	.+4      	; 0x114a <vfprintf+0x352>
    1146:	88 e5       	ldi	r24, 0x58	; 88
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	b6 01       	movw	r22, r12
    114c:	0c c0       	rjmp	.+24     	; 0x1166 <vfprintf+0x36e>
    114e:	8a 2d       	mov	r24, r10
    1150:	86 78       	andi	r24, 0x86	; 134
    1152:	59 f0       	breq	.+22     	; 0x116a <vfprintf+0x372>
    1154:	a1 fe       	sbrs	r10, 1
    1156:	02 c0       	rjmp	.+4      	; 0x115c <vfprintf+0x364>
    1158:	8b e2       	ldi	r24, 0x2B	; 43
    115a:	01 c0       	rjmp	.+2      	; 0x115e <vfprintf+0x366>
    115c:	80 e2       	ldi	r24, 0x20	; 32
    115e:	a7 fc       	sbrc	r10, 7
    1160:	8d e2       	ldi	r24, 0x2D	; 45
    1162:	b6 01       	movw	r22, r12
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <fputc>
    116a:	89 14       	cp	r8, r9
    116c:	38 f4       	brcc	.+14     	; 0x117c <vfprintf+0x384>
    116e:	b6 01       	movw	r22, r12
    1170:	80 e3       	ldi	r24, 0x30	; 48
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <fputc>
    1178:	9a 94       	dec	r9
    117a:	f7 cf       	rjmp	.-18     	; 0x116a <vfprintf+0x372>
    117c:	8a 94       	dec	r8
    117e:	f3 01       	movw	r30, r6
    1180:	e8 0d       	add	r30, r8
    1182:	f1 1d       	adc	r31, r1
    1184:	80 81       	ld	r24, Z
    1186:	b6 01       	movw	r22, r12
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <fputc>
    118e:	81 10       	cpse	r8, r1
    1190:	f5 cf       	rjmp	.-22     	; 0x117c <vfprintf+0x384>
    1192:	22 20       	and	r2, r2
    1194:	09 f4       	brne	.+2      	; 0x1198 <vfprintf+0x3a0>
    1196:	42 ce       	rjmp	.-892    	; 0xe1c <vfprintf+0x24>
    1198:	b6 01       	movw	r22, r12
    119a:	80 e2       	ldi	r24, 0x20	; 32
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <fputc>
    11a2:	2a 94       	dec	r2
    11a4:	f6 cf       	rjmp	.-20     	; 0x1192 <vfprintf+0x39a>
    11a6:	f6 01       	movw	r30, r12
    11a8:	86 81       	ldd	r24, Z+6	; 0x06
    11aa:	97 81       	ldd	r25, Z+7	; 0x07
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <vfprintf+0x3ba>
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	9f ef       	ldi	r25, 0xFF	; 255
    11b2:	2b 96       	adiw	r28, 0x0b	; 11
    11b4:	e2 e1       	ldi	r30, 0x12	; 18
    11b6:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__epilogue_restores__>

000011ba <strnlen_P>:
    11ba:	fc 01       	movw	r30, r24
    11bc:	05 90       	lpm	r0, Z+
    11be:	61 50       	subi	r22, 0x01	; 1
    11c0:	70 40       	sbci	r23, 0x00	; 0
    11c2:	01 10       	cpse	r0, r1
    11c4:	d8 f7       	brcc	.-10     	; 0x11bc <strnlen_P+0x2>
    11c6:	80 95       	com	r24
    11c8:	90 95       	com	r25
    11ca:	8e 0f       	add	r24, r30
    11cc:	9f 1f       	adc	r25, r31
    11ce:	08 95       	ret

000011d0 <strnlen>:
    11d0:	fc 01       	movw	r30, r24
    11d2:	61 50       	subi	r22, 0x01	; 1
    11d4:	70 40       	sbci	r23, 0x00	; 0
    11d6:	01 90       	ld	r0, Z+
    11d8:	01 10       	cpse	r0, r1
    11da:	d8 f7       	brcc	.-10     	; 0x11d2 <strnlen+0x2>
    11dc:	80 95       	com	r24
    11de:	90 95       	com	r25
    11e0:	8e 0f       	add	r24, r30
    11e2:	9f 1f       	adc	r25, r31
    11e4:	08 95       	ret

000011e6 <fputc>:
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	fb 01       	movw	r30, r22
    11f0:	23 81       	ldd	r18, Z+3	; 0x03
    11f2:	21 fd       	sbrc	r18, 1
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <fputc+0x16>
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	9f ef       	ldi	r25, 0xFF	; 255
    11fa:	2c c0       	rjmp	.+88     	; 0x1254 <fputc+0x6e>
    11fc:	22 ff       	sbrs	r18, 2
    11fe:	16 c0       	rjmp	.+44     	; 0x122c <fputc+0x46>
    1200:	46 81       	ldd	r20, Z+6	; 0x06
    1202:	57 81       	ldd	r21, Z+7	; 0x07
    1204:	24 81       	ldd	r18, Z+4	; 0x04
    1206:	35 81       	ldd	r19, Z+5	; 0x05
    1208:	42 17       	cp	r20, r18
    120a:	53 07       	cpc	r21, r19
    120c:	44 f4       	brge	.+16     	; 0x121e <fputc+0x38>
    120e:	a0 81       	ld	r26, Z
    1210:	b1 81       	ldd	r27, Z+1	; 0x01
    1212:	9d 01       	movw	r18, r26
    1214:	2f 5f       	subi	r18, 0xFF	; 255
    1216:	3f 4f       	sbci	r19, 0xFF	; 255
    1218:	31 83       	std	Z+1, r19	; 0x01
    121a:	20 83       	st	Z, r18
    121c:	8c 93       	st	X, r24
    121e:	26 81       	ldd	r18, Z+6	; 0x06
    1220:	37 81       	ldd	r19, Z+7	; 0x07
    1222:	2f 5f       	subi	r18, 0xFF	; 255
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	37 83       	std	Z+7, r19	; 0x07
    1228:	26 83       	std	Z+6, r18	; 0x06
    122a:	14 c0       	rjmp	.+40     	; 0x1254 <fputc+0x6e>
    122c:	8b 01       	movw	r16, r22
    122e:	ec 01       	movw	r28, r24
    1230:	fb 01       	movw	r30, r22
    1232:	00 84       	ldd	r0, Z+8	; 0x08
    1234:	f1 85       	ldd	r31, Z+9	; 0x09
    1236:	e0 2d       	mov	r30, r0
    1238:	09 95       	icall
    123a:	89 2b       	or	r24, r25
    123c:	e1 f6       	brne	.-72     	; 0x11f6 <fputc+0x10>
    123e:	d8 01       	movw	r26, r16
    1240:	16 96       	adiw	r26, 0x06	; 6
    1242:	8d 91       	ld	r24, X+
    1244:	9c 91       	ld	r25, X
    1246:	17 97       	sbiw	r26, 0x07	; 7
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	17 96       	adiw	r26, 0x07	; 7
    124c:	9c 93       	st	X, r25
    124e:	8e 93       	st	-X, r24
    1250:	16 97       	sbiw	r26, 0x06	; 6
    1252:	ce 01       	movw	r24, r28
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	08 95       	ret

0000125e <__ultoa_invert>:
    125e:	fa 01       	movw	r30, r20
    1260:	aa 27       	eor	r26, r26
    1262:	28 30       	cpi	r18, 0x08	; 8
    1264:	51 f1       	breq	.+84     	; 0x12ba <__ultoa_invert+0x5c>
    1266:	20 31       	cpi	r18, 0x10	; 16
    1268:	81 f1       	breq	.+96     	; 0x12ca <__ultoa_invert+0x6c>
    126a:	e8 94       	clt
    126c:	6f 93       	push	r22
    126e:	6e 7f       	andi	r22, 0xFE	; 254
    1270:	6e 5f       	subi	r22, 0xFE	; 254
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	8f 4f       	sbci	r24, 0xFF	; 255
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	af 4f       	sbci	r26, 0xFF	; 255
    127a:	b1 e0       	ldi	r27, 0x01	; 1
    127c:	3e d0       	rcall	.+124    	; 0x12fa <__ultoa_invert+0x9c>
    127e:	b4 e0       	ldi	r27, 0x04	; 4
    1280:	3c d0       	rcall	.+120    	; 0x12fa <__ultoa_invert+0x9c>
    1282:	67 0f       	add	r22, r23
    1284:	78 1f       	adc	r23, r24
    1286:	89 1f       	adc	r24, r25
    1288:	9a 1f       	adc	r25, r26
    128a:	a1 1d       	adc	r26, r1
    128c:	68 0f       	add	r22, r24
    128e:	79 1f       	adc	r23, r25
    1290:	8a 1f       	adc	r24, r26
    1292:	91 1d       	adc	r25, r1
    1294:	a1 1d       	adc	r26, r1
    1296:	6a 0f       	add	r22, r26
    1298:	71 1d       	adc	r23, r1
    129a:	81 1d       	adc	r24, r1
    129c:	91 1d       	adc	r25, r1
    129e:	a1 1d       	adc	r26, r1
    12a0:	20 d0       	rcall	.+64     	; 0x12e2 <__ultoa_invert+0x84>
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <__ultoa_invert+0x48>
    12a4:	68 94       	set
    12a6:	3f 91       	pop	r19
    12a8:	2a e0       	ldi	r18, 0x0A	; 10
    12aa:	26 9f       	mul	r18, r22
    12ac:	11 24       	eor	r1, r1
    12ae:	30 19       	sub	r19, r0
    12b0:	30 5d       	subi	r19, 0xD0	; 208
    12b2:	31 93       	st	Z+, r19
    12b4:	de f6       	brtc	.-74     	; 0x126c <__ultoa_invert+0xe>
    12b6:	cf 01       	movw	r24, r30
    12b8:	08 95       	ret
    12ba:	46 2f       	mov	r20, r22
    12bc:	47 70       	andi	r20, 0x07	; 7
    12be:	40 5d       	subi	r20, 0xD0	; 208
    12c0:	41 93       	st	Z+, r20
    12c2:	b3 e0       	ldi	r27, 0x03	; 3
    12c4:	0f d0       	rcall	.+30     	; 0x12e4 <__ultoa_invert+0x86>
    12c6:	c9 f7       	brne	.-14     	; 0x12ba <__ultoa_invert+0x5c>
    12c8:	f6 cf       	rjmp	.-20     	; 0x12b6 <__ultoa_invert+0x58>
    12ca:	46 2f       	mov	r20, r22
    12cc:	4f 70       	andi	r20, 0x0F	; 15
    12ce:	40 5d       	subi	r20, 0xD0	; 208
    12d0:	4a 33       	cpi	r20, 0x3A	; 58
    12d2:	18 f0       	brcs	.+6      	; 0x12da <__ultoa_invert+0x7c>
    12d4:	49 5d       	subi	r20, 0xD9	; 217
    12d6:	31 fd       	sbrc	r19, 1
    12d8:	40 52       	subi	r20, 0x20	; 32
    12da:	41 93       	st	Z+, r20
    12dc:	02 d0       	rcall	.+4      	; 0x12e2 <__ultoa_invert+0x84>
    12de:	a9 f7       	brne	.-22     	; 0x12ca <__ultoa_invert+0x6c>
    12e0:	ea cf       	rjmp	.-44     	; 0x12b6 <__ultoa_invert+0x58>
    12e2:	b4 e0       	ldi	r27, 0x04	; 4
    12e4:	a6 95       	lsr	r26
    12e6:	97 95       	ror	r25
    12e8:	87 95       	ror	r24
    12ea:	77 95       	ror	r23
    12ec:	67 95       	ror	r22
    12ee:	ba 95       	dec	r27
    12f0:	c9 f7       	brne	.-14     	; 0x12e4 <__ultoa_invert+0x86>
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	61 05       	cpc	r22, r1
    12f6:	71 05       	cpc	r23, r1
    12f8:	08 95       	ret
    12fa:	9b 01       	movw	r18, r22
    12fc:	ac 01       	movw	r20, r24
    12fe:	0a 2e       	mov	r0, r26
    1300:	06 94       	lsr	r0
    1302:	57 95       	ror	r21
    1304:	47 95       	ror	r20
    1306:	37 95       	ror	r19
    1308:	27 95       	ror	r18
    130a:	ba 95       	dec	r27
    130c:	c9 f7       	brne	.-14     	; 0x1300 <__ultoa_invert+0xa2>
    130e:	62 0f       	add	r22, r18
    1310:	73 1f       	adc	r23, r19
    1312:	84 1f       	adc	r24, r20
    1314:	95 1f       	adc	r25, r21
    1316:	a0 1d       	adc	r26, r0
    1318:	08 95       	ret

0000131a <__divmodsi4>:
    131a:	05 2e       	mov	r0, r21
    131c:	97 fb       	bst	r25, 7
    131e:	1e f4       	brtc	.+6      	; 0x1326 <__divmodsi4+0xc>
    1320:	00 94       	com	r0
    1322:	0e 94 a4 09 	call	0x1348	; 0x1348 <__negsi2>
    1326:	57 fd       	sbrc	r21, 7
    1328:	07 d0       	rcall	.+14     	; 0x1338 <__divmodsi4_neg2>
    132a:	0e 94 36 06 	call	0xc6c	; 0xc6c <__udivmodsi4>
    132e:	07 fc       	sbrc	r0, 7
    1330:	03 d0       	rcall	.+6      	; 0x1338 <__divmodsi4_neg2>
    1332:	4e f4       	brtc	.+18     	; 0x1346 <__divmodsi4_exit>
    1334:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__negsi2>

00001338 <__divmodsi4_neg2>:
    1338:	50 95       	com	r21
    133a:	40 95       	com	r20
    133c:	30 95       	com	r19
    133e:	21 95       	neg	r18
    1340:	3f 4f       	sbci	r19, 0xFF	; 255
    1342:	4f 4f       	sbci	r20, 0xFF	; 255
    1344:	5f 4f       	sbci	r21, 0xFF	; 255

00001346 <__divmodsi4_exit>:
    1346:	08 95       	ret

00001348 <__negsi2>:
    1348:	90 95       	com	r25
    134a:	80 95       	com	r24
    134c:	70 95       	com	r23
    134e:	61 95       	neg	r22
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	8f 4f       	sbci	r24, 0xFF	; 255
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	08 95       	ret

00001358 <__muluhisi3>:
    1358:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__umulhisi3>
    135c:	a5 9f       	mul	r26, r21
    135e:	90 0d       	add	r25, r0
    1360:	b4 9f       	mul	r27, r20
    1362:	90 0d       	add	r25, r0
    1364:	a4 9f       	mul	r26, r20
    1366:	80 0d       	add	r24, r0
    1368:	91 1d       	adc	r25, r1
    136a:	11 24       	eor	r1, r1
    136c:	08 95       	ret

0000136e <__mulshisi3>:
    136e:	b7 ff       	sbrs	r27, 7
    1370:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__muluhisi3>

00001374 <__mulohisi3>:
    1374:	0e 94 ac 09 	call	0x1358	; 0x1358 <__muluhisi3>
    1378:	82 1b       	sub	r24, r18
    137a:	93 0b       	sbc	r25, r19
    137c:	08 95       	ret

0000137e <__prologue_saves__>:
    137e:	2f 92       	push	r2
    1380:	3f 92       	push	r3
    1382:	4f 92       	push	r4
    1384:	5f 92       	push	r5
    1386:	6f 92       	push	r6
    1388:	7f 92       	push	r7
    138a:	8f 92       	push	r8
    138c:	9f 92       	push	r9
    138e:	af 92       	push	r10
    1390:	bf 92       	push	r11
    1392:	cf 92       	push	r12
    1394:	df 92       	push	r13
    1396:	ef 92       	push	r14
    1398:	ff 92       	push	r15
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	ca 1b       	sub	r28, r26
    13a8:	db 0b       	sbc	r29, r27
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	09 94       	ijmp

000013b6 <__epilogue_restores__>:
    13b6:	2a 88       	ldd	r2, Y+18	; 0x12
    13b8:	39 88       	ldd	r3, Y+17	; 0x11
    13ba:	48 88       	ldd	r4, Y+16	; 0x10
    13bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    13be:	6e 84       	ldd	r6, Y+14	; 0x0e
    13c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    13c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    13c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    13c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    13c8:	b9 84       	ldd	r11, Y+9	; 0x09
    13ca:	c8 84       	ldd	r12, Y+8	; 0x08
    13cc:	df 80       	ldd	r13, Y+7	; 0x07
    13ce:	ee 80       	ldd	r14, Y+6	; 0x06
    13d0:	fd 80       	ldd	r15, Y+5	; 0x05
    13d2:	0c 81       	ldd	r16, Y+4	; 0x04
    13d4:	1b 81       	ldd	r17, Y+3	; 0x03
    13d6:	aa 81       	ldd	r26, Y+2	; 0x02
    13d8:	b9 81       	ldd	r27, Y+1	; 0x01
    13da:	ce 0f       	add	r28, r30
    13dc:	d1 1d       	adc	r29, r1
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	ed 01       	movw	r28, r26
    13ea:	08 95       	ret

000013ec <_exit>:
    13ec:	f8 94       	cli

000013ee <__stop_program>:
    13ee:	ff cf       	rjmp	.-2      	; 0x13ee <__stop_program>
